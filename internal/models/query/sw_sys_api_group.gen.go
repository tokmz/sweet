// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"sweet/internal/models/entity"
)

func newSysApiGroup(db *gorm.DB, opts ...gen.DOOption) sysApiGroup {
	_sysApiGroup := sysApiGroup{}

	_sysApiGroup.sysApiGroupDo.UseDB(db, opts...)
	_sysApiGroup.sysApiGroupDo.UseModel(&entity.SysApiGroup{})

	tableName := _sysApiGroup.sysApiGroupDo.TableName()
	_sysApiGroup.ALL = field.NewAsterisk(tableName)
	_sysApiGroup.ID = field.NewInt64(tableName, "id")
	_sysApiGroup.Name = field.NewString(tableName, "name")
	_sysApiGroup.Code = field.NewString(tableName, "code")
	_sysApiGroup.Description = field.NewString(tableName, "description")
	_sysApiGroup.Sort = field.NewInt64(tableName, "sort")
	_sysApiGroup.Status = field.NewInt64(tableName, "status")
	_sysApiGroup.CreateBy = field.NewInt64(tableName, "create_by")
	_sysApiGroup.UpdateBy = field.NewInt64(tableName, "update_by")
	_sysApiGroup.CreatedAt = field.NewTime(tableName, "created_at")
	_sysApiGroup.UpdatedAt = field.NewTime(tableName, "updated_at")
	_sysApiGroup.DeletedAt = field.NewField(tableName, "deleted_at")

	_sysApiGroup.fillFieldMap()

	return _sysApiGroup
}

// sysApiGroup API分组表
type sysApiGroup struct {
	sysApiGroupDo

	ALL         field.Asterisk
	ID          field.Int64  // 分组ID
	Name        field.String // 分组名称
	Code        field.String // 分组编码
	Description field.String // 分组描述
	Sort        field.Int64  // 显示顺序
	Status      field.Int64  // 分组状态（1正常 2停用）
	CreateBy    field.Int64  // 创建者
	UpdateBy    field.Int64  // 更新者
	CreatedAt   field.Time   // 创建时间
	UpdatedAt   field.Time   // 更新时间
	DeletedAt   field.Field  // 删除时间

	fieldMap map[string]field.Expr
}

func (s sysApiGroup) Table(newTableName string) *sysApiGroup {
	s.sysApiGroupDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysApiGroup) As(alias string) *sysApiGroup {
	s.sysApiGroupDo.DO = *(s.sysApiGroupDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysApiGroup) updateTableName(table string) *sysApiGroup {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Name = field.NewString(table, "name")
	s.Code = field.NewString(table, "code")
	s.Description = field.NewString(table, "description")
	s.Sort = field.NewInt64(table, "sort")
	s.Status = field.NewInt64(table, "status")
	s.CreateBy = field.NewInt64(table, "create_by")
	s.UpdateBy = field.NewInt64(table, "update_by")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *sysApiGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysApiGroup) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["code"] = s.Code
	s.fieldMap["description"] = s.Description
	s.fieldMap["sort"] = s.Sort
	s.fieldMap["status"] = s.Status
	s.fieldMap["create_by"] = s.CreateBy
	s.fieldMap["update_by"] = s.UpdateBy
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s sysApiGroup) clone(db *gorm.DB) sysApiGroup {
	s.sysApiGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysApiGroup) replaceDB(db *gorm.DB) sysApiGroup {
	s.sysApiGroupDo.ReplaceDB(db)
	return s
}

type sysApiGroupDo struct{ gen.DO }

type ISysApiGroupDo interface {
	gen.SubQuery
	Debug() ISysApiGroupDo
	WithContext(ctx context.Context) ISysApiGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysApiGroupDo
	WriteDB() ISysApiGroupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysApiGroupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysApiGroupDo
	Not(conds ...gen.Condition) ISysApiGroupDo
	Or(conds ...gen.Condition) ISysApiGroupDo
	Select(conds ...field.Expr) ISysApiGroupDo
	Where(conds ...gen.Condition) ISysApiGroupDo
	Order(conds ...field.Expr) ISysApiGroupDo
	Distinct(cols ...field.Expr) ISysApiGroupDo
	Omit(cols ...field.Expr) ISysApiGroupDo
	Join(table schema.Tabler, on ...field.Expr) ISysApiGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysApiGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysApiGroupDo
	Group(cols ...field.Expr) ISysApiGroupDo
	Having(conds ...gen.Condition) ISysApiGroupDo
	Limit(limit int) ISysApiGroupDo
	Offset(offset int) ISysApiGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysApiGroupDo
	Unscoped() ISysApiGroupDo
	Create(values ...*entity.SysApiGroup) error
	CreateInBatches(values []*entity.SysApiGroup, batchSize int) error
	Save(values ...*entity.SysApiGroup) error
	First() (*entity.SysApiGroup, error)
	Take() (*entity.SysApiGroup, error)
	Last() (*entity.SysApiGroup, error)
	Find() ([]*entity.SysApiGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SysApiGroup, err error)
	FindInBatches(result *[]*entity.SysApiGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.SysApiGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysApiGroupDo
	Assign(attrs ...field.AssignExpr) ISysApiGroupDo
	Joins(fields ...field.RelationField) ISysApiGroupDo
	Preload(fields ...field.RelationField) ISysApiGroupDo
	FirstOrInit() (*entity.SysApiGroup, error)
	FirstOrCreate() (*entity.SysApiGroup, error)
	FindByPage(offset int, limit int) (result []*entity.SysApiGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysApiGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysApiGroupDo) Debug() ISysApiGroupDo {
	return s.withDO(s.DO.Debug())
}

func (s sysApiGroupDo) WithContext(ctx context.Context) ISysApiGroupDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysApiGroupDo) ReadDB() ISysApiGroupDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysApiGroupDo) WriteDB() ISysApiGroupDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysApiGroupDo) Session(config *gorm.Session) ISysApiGroupDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysApiGroupDo) Clauses(conds ...clause.Expression) ISysApiGroupDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysApiGroupDo) Returning(value interface{}, columns ...string) ISysApiGroupDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysApiGroupDo) Not(conds ...gen.Condition) ISysApiGroupDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysApiGroupDo) Or(conds ...gen.Condition) ISysApiGroupDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysApiGroupDo) Select(conds ...field.Expr) ISysApiGroupDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysApiGroupDo) Where(conds ...gen.Condition) ISysApiGroupDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysApiGroupDo) Order(conds ...field.Expr) ISysApiGroupDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysApiGroupDo) Distinct(cols ...field.Expr) ISysApiGroupDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysApiGroupDo) Omit(cols ...field.Expr) ISysApiGroupDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysApiGroupDo) Join(table schema.Tabler, on ...field.Expr) ISysApiGroupDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysApiGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysApiGroupDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysApiGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysApiGroupDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysApiGroupDo) Group(cols ...field.Expr) ISysApiGroupDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysApiGroupDo) Having(conds ...gen.Condition) ISysApiGroupDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysApiGroupDo) Limit(limit int) ISysApiGroupDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysApiGroupDo) Offset(offset int) ISysApiGroupDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysApiGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysApiGroupDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysApiGroupDo) Unscoped() ISysApiGroupDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysApiGroupDo) Create(values ...*entity.SysApiGroup) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysApiGroupDo) CreateInBatches(values []*entity.SysApiGroup, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysApiGroupDo) Save(values ...*entity.SysApiGroup) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysApiGroupDo) First() (*entity.SysApiGroup, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysApiGroup), nil
	}
}

func (s sysApiGroupDo) Take() (*entity.SysApiGroup, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysApiGroup), nil
	}
}

func (s sysApiGroupDo) Last() (*entity.SysApiGroup, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysApiGroup), nil
	}
}

func (s sysApiGroupDo) Find() ([]*entity.SysApiGroup, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SysApiGroup), err
}

func (s sysApiGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SysApiGroup, err error) {
	buf := make([]*entity.SysApiGroup, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysApiGroupDo) FindInBatches(result *[]*entity.SysApiGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysApiGroupDo) Attrs(attrs ...field.AssignExpr) ISysApiGroupDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysApiGroupDo) Assign(attrs ...field.AssignExpr) ISysApiGroupDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysApiGroupDo) Joins(fields ...field.RelationField) ISysApiGroupDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysApiGroupDo) Preload(fields ...field.RelationField) ISysApiGroupDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysApiGroupDo) FirstOrInit() (*entity.SysApiGroup, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysApiGroup), nil
	}
}

func (s sysApiGroupDo) FirstOrCreate() (*entity.SysApiGroup, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysApiGroup), nil
	}
}

func (s sysApiGroupDo) FindByPage(offset int, limit int) (result []*entity.SysApiGroup, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysApiGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysApiGroupDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysApiGroupDo) Delete(models ...*entity.SysApiGroup) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysApiGroupDo) withDO(do gen.Dao) *sysApiGroupDo {
	s.DO = *do.(*gen.DO)
	return s
}

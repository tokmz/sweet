// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"sweet/internal/models/entity"
)

func newSysOperationLog(db *gorm.DB, opts ...gen.DOOption) sysOperationLog {
	_sysOperationLog := sysOperationLog{}

	_sysOperationLog.sysOperationLogDo.UseDB(db, opts...)
	_sysOperationLog.sysOperationLogDo.UseModel(&entity.SysOperationLog{})

	tableName := _sysOperationLog.sysOperationLogDo.TableName()
	_sysOperationLog.ALL = field.NewAsterisk(tableName)
	_sysOperationLog.ID = field.NewInt64(tableName, "id")
	_sysOperationLog.UserID = field.NewInt64(tableName, "user_id")
	_sysOperationLog.Username = field.NewString(tableName, "username")
	_sysOperationLog.Module = field.NewString(tableName, "module")
	_sysOperationLog.Operation = field.NewString(tableName, "operation")
	_sysOperationLog.Method = field.NewString(tableName, "method")
	_sysOperationLog.URL = field.NewString(tableName, "url")
	_sysOperationLog.IP = field.NewString(tableName, "ip")
	_sysOperationLog.Location = field.NewString(tableName, "location")
	_sysOperationLog.UserAgent = field.NewString(tableName, "user_agent")
	_sysOperationLog.RequestParams = field.NewString(tableName, "request_params")
	_sysOperationLog.ResponseData = field.NewString(tableName, "response_data")
	_sysOperationLog.Status = field.NewInt64(tableName, "status")
	_sysOperationLog.ErrorMsg = field.NewString(tableName, "error_msg")
	_sysOperationLog.CostTime = field.NewInt64(tableName, "cost_time")
	_sysOperationLog.CreatedAt = field.NewTime(tableName, "created_at")
	_sysOperationLog.User = sysOperationLogBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "entity.SysUser"),
	}

	_sysOperationLog.fillFieldMap()

	return _sysOperationLog
}

// sysOperationLog 系统操作日志表
type sysOperationLog struct {
	sysOperationLogDo

	ALL           field.Asterisk
	ID            field.Int64  // 日志ID
	UserID        field.Int64  // 操作用户ID
	Username      field.String // 操作用户名
	Module        field.String // 操作模块
	Operation     field.String // 操作类型
	Method        field.String // HTTP方法
	URL           field.String // 请求URL
	IP            field.String // 操作IP
	Location      field.String // IP归属地
	UserAgent     field.String // 用户代理
	RequestParams field.String // 请求参数
	ResponseData  field.String // 响应数据
	Status        field.Int64  // 操作状态（1成功 2失败）
	ErrorMsg      field.String // 错误信息
	CostTime      field.Int64  // 耗时（毫秒）
	CreatedAt     field.Time   // 操作时间
	User          sysOperationLogBelongsToUser

	fieldMap map[string]field.Expr
}

func (s sysOperationLog) Table(newTableName string) *sysOperationLog {
	s.sysOperationLogDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysOperationLog) As(alias string) *sysOperationLog {
	s.sysOperationLogDo.DO = *(s.sysOperationLogDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysOperationLog) updateTableName(table string) *sysOperationLog {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.UserID = field.NewInt64(table, "user_id")
	s.Username = field.NewString(table, "username")
	s.Module = field.NewString(table, "module")
	s.Operation = field.NewString(table, "operation")
	s.Method = field.NewString(table, "method")
	s.URL = field.NewString(table, "url")
	s.IP = field.NewString(table, "ip")
	s.Location = field.NewString(table, "location")
	s.UserAgent = field.NewString(table, "user_agent")
	s.RequestParams = field.NewString(table, "request_params")
	s.ResponseData = field.NewString(table, "response_data")
	s.Status = field.NewInt64(table, "status")
	s.ErrorMsg = field.NewString(table, "error_msg")
	s.CostTime = field.NewInt64(table, "cost_time")
	s.CreatedAt = field.NewTime(table, "created_at")

	s.fillFieldMap()

	return s
}

func (s *sysOperationLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysOperationLog) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 17)
	s.fieldMap["id"] = s.ID
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["username"] = s.Username
	s.fieldMap["module"] = s.Module
	s.fieldMap["operation"] = s.Operation
	s.fieldMap["method"] = s.Method
	s.fieldMap["url"] = s.URL
	s.fieldMap["ip"] = s.IP
	s.fieldMap["location"] = s.Location
	s.fieldMap["user_agent"] = s.UserAgent
	s.fieldMap["request_params"] = s.RequestParams
	s.fieldMap["response_data"] = s.ResponseData
	s.fieldMap["status"] = s.Status
	s.fieldMap["error_msg"] = s.ErrorMsg
	s.fieldMap["cost_time"] = s.CostTime
	s.fieldMap["created_at"] = s.CreatedAt

}

func (s sysOperationLog) clone(db *gorm.DB) sysOperationLog {
	s.sysOperationLogDo.ReplaceConnPool(db.Statement.ConnPool)
	s.User.db = db.Session(&gorm.Session{Initialized: true})
	s.User.db.Statement.ConnPool = db.Statement.ConnPool
	return s
}

func (s sysOperationLog) replaceDB(db *gorm.DB) sysOperationLog {
	s.sysOperationLogDo.ReplaceDB(db)
	s.User.db = db.Session(&gorm.Session{})
	return s
}

type sysOperationLogBelongsToUser struct {
	db *gorm.DB

	field.RelationField
}

func (a sysOperationLogBelongsToUser) Where(conds ...field.Expr) *sysOperationLogBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a sysOperationLogBelongsToUser) WithContext(ctx context.Context) *sysOperationLogBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a sysOperationLogBelongsToUser) Session(session *gorm.Session) *sysOperationLogBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a sysOperationLogBelongsToUser) Model(m *entity.SysOperationLog) *sysOperationLogBelongsToUserTx {
	return &sysOperationLogBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

func (a sysOperationLogBelongsToUser) Unscoped() *sysOperationLogBelongsToUser {
	a.db = a.db.Unscoped()
	return &a
}

type sysOperationLogBelongsToUserTx struct{ tx *gorm.Association }

func (a sysOperationLogBelongsToUserTx) Find() (result *entity.SysUser, err error) {
	return result, a.tx.Find(&result)
}

func (a sysOperationLogBelongsToUserTx) Append(values ...*entity.SysUser) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a sysOperationLogBelongsToUserTx) Replace(values ...*entity.SysUser) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a sysOperationLogBelongsToUserTx) Delete(values ...*entity.SysUser) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a sysOperationLogBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a sysOperationLogBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

func (a sysOperationLogBelongsToUserTx) Unscoped() *sysOperationLogBelongsToUserTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type sysOperationLogDo struct{ gen.DO }

type ISysOperationLogDo interface {
	gen.SubQuery
	Debug() ISysOperationLogDo
	WithContext(ctx context.Context) ISysOperationLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysOperationLogDo
	WriteDB() ISysOperationLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysOperationLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysOperationLogDo
	Not(conds ...gen.Condition) ISysOperationLogDo
	Or(conds ...gen.Condition) ISysOperationLogDo
	Select(conds ...field.Expr) ISysOperationLogDo
	Where(conds ...gen.Condition) ISysOperationLogDo
	Order(conds ...field.Expr) ISysOperationLogDo
	Distinct(cols ...field.Expr) ISysOperationLogDo
	Omit(cols ...field.Expr) ISysOperationLogDo
	Join(table schema.Tabler, on ...field.Expr) ISysOperationLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysOperationLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysOperationLogDo
	Group(cols ...field.Expr) ISysOperationLogDo
	Having(conds ...gen.Condition) ISysOperationLogDo
	Limit(limit int) ISysOperationLogDo
	Offset(offset int) ISysOperationLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysOperationLogDo
	Unscoped() ISysOperationLogDo
	Create(values ...*entity.SysOperationLog) error
	CreateInBatches(values []*entity.SysOperationLog, batchSize int) error
	Save(values ...*entity.SysOperationLog) error
	First() (*entity.SysOperationLog, error)
	Take() (*entity.SysOperationLog, error)
	Last() (*entity.SysOperationLog, error)
	Find() ([]*entity.SysOperationLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SysOperationLog, err error)
	FindInBatches(result *[]*entity.SysOperationLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.SysOperationLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysOperationLogDo
	Assign(attrs ...field.AssignExpr) ISysOperationLogDo
	Joins(fields ...field.RelationField) ISysOperationLogDo
	Preload(fields ...field.RelationField) ISysOperationLogDo
	FirstOrInit() (*entity.SysOperationLog, error)
	FirstOrCreate() (*entity.SysOperationLog, error)
	FindByPage(offset int, limit int) (result []*entity.SysOperationLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysOperationLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysOperationLogDo) Debug() ISysOperationLogDo {
	return s.withDO(s.DO.Debug())
}

func (s sysOperationLogDo) WithContext(ctx context.Context) ISysOperationLogDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysOperationLogDo) ReadDB() ISysOperationLogDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysOperationLogDo) WriteDB() ISysOperationLogDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysOperationLogDo) Session(config *gorm.Session) ISysOperationLogDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysOperationLogDo) Clauses(conds ...clause.Expression) ISysOperationLogDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysOperationLogDo) Returning(value interface{}, columns ...string) ISysOperationLogDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysOperationLogDo) Not(conds ...gen.Condition) ISysOperationLogDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysOperationLogDo) Or(conds ...gen.Condition) ISysOperationLogDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysOperationLogDo) Select(conds ...field.Expr) ISysOperationLogDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysOperationLogDo) Where(conds ...gen.Condition) ISysOperationLogDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysOperationLogDo) Order(conds ...field.Expr) ISysOperationLogDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysOperationLogDo) Distinct(cols ...field.Expr) ISysOperationLogDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysOperationLogDo) Omit(cols ...field.Expr) ISysOperationLogDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysOperationLogDo) Join(table schema.Tabler, on ...field.Expr) ISysOperationLogDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysOperationLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysOperationLogDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysOperationLogDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysOperationLogDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysOperationLogDo) Group(cols ...field.Expr) ISysOperationLogDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysOperationLogDo) Having(conds ...gen.Condition) ISysOperationLogDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysOperationLogDo) Limit(limit int) ISysOperationLogDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysOperationLogDo) Offset(offset int) ISysOperationLogDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysOperationLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysOperationLogDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysOperationLogDo) Unscoped() ISysOperationLogDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysOperationLogDo) Create(values ...*entity.SysOperationLog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysOperationLogDo) CreateInBatches(values []*entity.SysOperationLog, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysOperationLogDo) Save(values ...*entity.SysOperationLog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysOperationLogDo) First() (*entity.SysOperationLog, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysOperationLog), nil
	}
}

func (s sysOperationLogDo) Take() (*entity.SysOperationLog, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysOperationLog), nil
	}
}

func (s sysOperationLogDo) Last() (*entity.SysOperationLog, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysOperationLog), nil
	}
}

func (s sysOperationLogDo) Find() ([]*entity.SysOperationLog, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SysOperationLog), err
}

func (s sysOperationLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SysOperationLog, err error) {
	buf := make([]*entity.SysOperationLog, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysOperationLogDo) FindInBatches(result *[]*entity.SysOperationLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysOperationLogDo) Attrs(attrs ...field.AssignExpr) ISysOperationLogDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysOperationLogDo) Assign(attrs ...field.AssignExpr) ISysOperationLogDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysOperationLogDo) Joins(fields ...field.RelationField) ISysOperationLogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysOperationLogDo) Preload(fields ...field.RelationField) ISysOperationLogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysOperationLogDo) FirstOrInit() (*entity.SysOperationLog, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysOperationLog), nil
	}
}

func (s sysOperationLogDo) FirstOrCreate() (*entity.SysOperationLog, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysOperationLog), nil
	}
}

func (s sysOperationLogDo) FindByPage(offset int, limit int) (result []*entity.SysOperationLog, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysOperationLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysOperationLogDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysOperationLogDo) Delete(models ...*entity.SysOperationLog) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysOperationLogDo) withDO(do gen.Dao) *sysOperationLogDo {
	s.DO = *do.(*gen.DO)
	return s
}

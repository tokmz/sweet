// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"sweet/internal/models/entity"
)

func newSysLoginLog(db *gorm.DB, opts ...gen.DOOption) sysLoginLog {
	_sysLoginLog := sysLoginLog{}

	_sysLoginLog.sysLoginLogDo.UseDB(db, opts...)
	_sysLoginLog.sysLoginLogDo.UseModel(&entity.SysLoginLog{})

	tableName := _sysLoginLog.sysLoginLogDo.TableName()
	_sysLoginLog.ALL = field.NewAsterisk(tableName)
	_sysLoginLog.ID = field.NewInt64(tableName, "id")
	_sysLoginLog.UserID = field.NewInt64(tableName, "user_id")
	_sysLoginLog.Username = field.NewString(tableName, "username")
	_sysLoginLog.LoginType = field.NewInt64(tableName, "login_type")
	_sysLoginLog.ClientType = field.NewInt64(tableName, "client_type")
	_sysLoginLog.IP = field.NewString(tableName, "ip")
	_sysLoginLog.Location = field.NewString(tableName, "location")
	_sysLoginLog.UserAgent = field.NewString(tableName, "user_agent")
	_sysLoginLog.DeviceInfo = field.NewString(tableName, "device_info")
	_sysLoginLog.Browser = field.NewString(tableName, "browser")
	_sysLoginLog.Os = field.NewString(tableName, "os")
	_sysLoginLog.Status = field.NewInt64(tableName, "status")
	_sysLoginLog.FailReason = field.NewString(tableName, "fail_reason")
	_sysLoginLog.CreatedAt = field.NewTime(tableName, "created_at")
	_sysLoginLog.UpdatedAt = field.NewTime(tableName, "updated_at")
	_sysLoginLog.DeletedAt = field.NewField(tableName, "deleted_at")
	_sysLoginLog.User = sysLoginLogBelongsToUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("User", "entity.SysUser"),
	}

	_sysLoginLog.fillFieldMap()

	return _sysLoginLog
}

// sysLoginLog 系统登录日志表
type sysLoginLog struct {
	sysLoginLogDo

	ALL        field.Asterisk
	ID         field.Int64  // 日志ID
	UserID     field.Int64  // 用户ID
	Username   field.String // 登录用户名
	LoginType  field.Int64  // 登录类型（1账号密码 2手机验证码 3邮箱验证码 4第三方登录 5微信 6QQ 7支付宝）
	ClientType field.Int64  // 客户端类型（1Web 2移动端 3小程序 4API 5管理后台）
	IP         field.String // 登录IP
	Location   field.String // IP归属地
	UserAgent  field.String // 用户代理
	DeviceInfo field.String // 设备信息
	Browser    field.String // 浏览器
	Os         field.String // 操作系统
	Status     field.Int64  // 登录状态（1成功 2失败 3异常）
	FailReason field.String // 失败原因
	CreatedAt  field.Time   // 创建时间
	UpdatedAt  field.Time   // 更新时间
	DeletedAt  field.Field  // 删除时间
	User       sysLoginLogBelongsToUser

	fieldMap map[string]field.Expr
}

func (s sysLoginLog) Table(newTableName string) *sysLoginLog {
	s.sysLoginLogDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysLoginLog) As(alias string) *sysLoginLog {
	s.sysLoginLogDo.DO = *(s.sysLoginLogDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysLoginLog) updateTableName(table string) *sysLoginLog {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.UserID = field.NewInt64(table, "user_id")
	s.Username = field.NewString(table, "username")
	s.LoginType = field.NewInt64(table, "login_type")
	s.ClientType = field.NewInt64(table, "client_type")
	s.IP = field.NewString(table, "ip")
	s.Location = field.NewString(table, "location")
	s.UserAgent = field.NewString(table, "user_agent")
	s.DeviceInfo = field.NewString(table, "device_info")
	s.Browser = field.NewString(table, "browser")
	s.Os = field.NewString(table, "os")
	s.Status = field.NewInt64(table, "status")
	s.FailReason = field.NewString(table, "fail_reason")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *sysLoginLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysLoginLog) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 17)
	s.fieldMap["id"] = s.ID
	s.fieldMap["user_id"] = s.UserID
	s.fieldMap["username"] = s.Username
	s.fieldMap["login_type"] = s.LoginType
	s.fieldMap["client_type"] = s.ClientType
	s.fieldMap["ip"] = s.IP
	s.fieldMap["location"] = s.Location
	s.fieldMap["user_agent"] = s.UserAgent
	s.fieldMap["device_info"] = s.DeviceInfo
	s.fieldMap["browser"] = s.Browser
	s.fieldMap["os"] = s.Os
	s.fieldMap["status"] = s.Status
	s.fieldMap["fail_reason"] = s.FailReason
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt

}

func (s sysLoginLog) clone(db *gorm.DB) sysLoginLog {
	s.sysLoginLogDo.ReplaceConnPool(db.Statement.ConnPool)
	s.User.db = db.Session(&gorm.Session{Initialized: true})
	s.User.db.Statement.ConnPool = db.Statement.ConnPool
	return s
}

func (s sysLoginLog) replaceDB(db *gorm.DB) sysLoginLog {
	s.sysLoginLogDo.ReplaceDB(db)
	s.User.db = db.Session(&gorm.Session{})
	return s
}

type sysLoginLogBelongsToUser struct {
	db *gorm.DB

	field.RelationField
}

func (a sysLoginLogBelongsToUser) Where(conds ...field.Expr) *sysLoginLogBelongsToUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a sysLoginLogBelongsToUser) WithContext(ctx context.Context) *sysLoginLogBelongsToUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a sysLoginLogBelongsToUser) Session(session *gorm.Session) *sysLoginLogBelongsToUser {
	a.db = a.db.Session(session)
	return &a
}

func (a sysLoginLogBelongsToUser) Model(m *entity.SysLoginLog) *sysLoginLogBelongsToUserTx {
	return &sysLoginLogBelongsToUserTx{a.db.Model(m).Association(a.Name())}
}

func (a sysLoginLogBelongsToUser) Unscoped() *sysLoginLogBelongsToUser {
	a.db = a.db.Unscoped()
	return &a
}

type sysLoginLogBelongsToUserTx struct{ tx *gorm.Association }

func (a sysLoginLogBelongsToUserTx) Find() (result *entity.SysUser, err error) {
	return result, a.tx.Find(&result)
}

func (a sysLoginLogBelongsToUserTx) Append(values ...*entity.SysUser) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a sysLoginLogBelongsToUserTx) Replace(values ...*entity.SysUser) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a sysLoginLogBelongsToUserTx) Delete(values ...*entity.SysUser) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a sysLoginLogBelongsToUserTx) Clear() error {
	return a.tx.Clear()
}

func (a sysLoginLogBelongsToUserTx) Count() int64 {
	return a.tx.Count()
}

func (a sysLoginLogBelongsToUserTx) Unscoped() *sysLoginLogBelongsToUserTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type sysLoginLogDo struct{ gen.DO }

type ISysLoginLogDo interface {
	gen.SubQuery
	Debug() ISysLoginLogDo
	WithContext(ctx context.Context) ISysLoginLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysLoginLogDo
	WriteDB() ISysLoginLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysLoginLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysLoginLogDo
	Not(conds ...gen.Condition) ISysLoginLogDo
	Or(conds ...gen.Condition) ISysLoginLogDo
	Select(conds ...field.Expr) ISysLoginLogDo
	Where(conds ...gen.Condition) ISysLoginLogDo
	Order(conds ...field.Expr) ISysLoginLogDo
	Distinct(cols ...field.Expr) ISysLoginLogDo
	Omit(cols ...field.Expr) ISysLoginLogDo
	Join(table schema.Tabler, on ...field.Expr) ISysLoginLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysLoginLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysLoginLogDo
	Group(cols ...field.Expr) ISysLoginLogDo
	Having(conds ...gen.Condition) ISysLoginLogDo
	Limit(limit int) ISysLoginLogDo
	Offset(offset int) ISysLoginLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysLoginLogDo
	Unscoped() ISysLoginLogDo
	Create(values ...*entity.SysLoginLog) error
	CreateInBatches(values []*entity.SysLoginLog, batchSize int) error
	Save(values ...*entity.SysLoginLog) error
	First() (*entity.SysLoginLog, error)
	Take() (*entity.SysLoginLog, error)
	Last() (*entity.SysLoginLog, error)
	Find() ([]*entity.SysLoginLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SysLoginLog, err error)
	FindInBatches(result *[]*entity.SysLoginLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.SysLoginLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysLoginLogDo
	Assign(attrs ...field.AssignExpr) ISysLoginLogDo
	Joins(fields ...field.RelationField) ISysLoginLogDo
	Preload(fields ...field.RelationField) ISysLoginLogDo
	FirstOrInit() (*entity.SysLoginLog, error)
	FirstOrCreate() (*entity.SysLoginLog, error)
	FindByPage(offset int, limit int) (result []*entity.SysLoginLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysLoginLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysLoginLogDo) Debug() ISysLoginLogDo {
	return s.withDO(s.DO.Debug())
}

func (s sysLoginLogDo) WithContext(ctx context.Context) ISysLoginLogDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysLoginLogDo) ReadDB() ISysLoginLogDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysLoginLogDo) WriteDB() ISysLoginLogDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysLoginLogDo) Session(config *gorm.Session) ISysLoginLogDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysLoginLogDo) Clauses(conds ...clause.Expression) ISysLoginLogDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysLoginLogDo) Returning(value interface{}, columns ...string) ISysLoginLogDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysLoginLogDo) Not(conds ...gen.Condition) ISysLoginLogDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysLoginLogDo) Or(conds ...gen.Condition) ISysLoginLogDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysLoginLogDo) Select(conds ...field.Expr) ISysLoginLogDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysLoginLogDo) Where(conds ...gen.Condition) ISysLoginLogDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysLoginLogDo) Order(conds ...field.Expr) ISysLoginLogDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysLoginLogDo) Distinct(cols ...field.Expr) ISysLoginLogDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysLoginLogDo) Omit(cols ...field.Expr) ISysLoginLogDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysLoginLogDo) Join(table schema.Tabler, on ...field.Expr) ISysLoginLogDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysLoginLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysLoginLogDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysLoginLogDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysLoginLogDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysLoginLogDo) Group(cols ...field.Expr) ISysLoginLogDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysLoginLogDo) Having(conds ...gen.Condition) ISysLoginLogDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysLoginLogDo) Limit(limit int) ISysLoginLogDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysLoginLogDo) Offset(offset int) ISysLoginLogDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysLoginLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysLoginLogDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysLoginLogDo) Unscoped() ISysLoginLogDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysLoginLogDo) Create(values ...*entity.SysLoginLog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysLoginLogDo) CreateInBatches(values []*entity.SysLoginLog, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysLoginLogDo) Save(values ...*entity.SysLoginLog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysLoginLogDo) First() (*entity.SysLoginLog, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysLoginLog), nil
	}
}

func (s sysLoginLogDo) Take() (*entity.SysLoginLog, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysLoginLog), nil
	}
}

func (s sysLoginLogDo) Last() (*entity.SysLoginLog, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysLoginLog), nil
	}
}

func (s sysLoginLogDo) Find() ([]*entity.SysLoginLog, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SysLoginLog), err
}

func (s sysLoginLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SysLoginLog, err error) {
	buf := make([]*entity.SysLoginLog, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysLoginLogDo) FindInBatches(result *[]*entity.SysLoginLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysLoginLogDo) Attrs(attrs ...field.AssignExpr) ISysLoginLogDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysLoginLogDo) Assign(attrs ...field.AssignExpr) ISysLoginLogDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysLoginLogDo) Joins(fields ...field.RelationField) ISysLoginLogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysLoginLogDo) Preload(fields ...field.RelationField) ISysLoginLogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysLoginLogDo) FirstOrInit() (*entity.SysLoginLog, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysLoginLog), nil
	}
}

func (s sysLoginLogDo) FirstOrCreate() (*entity.SysLoginLog, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysLoginLog), nil
	}
}

func (s sysLoginLogDo) FindByPage(offset int, limit int) (result []*entity.SysLoginLog, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysLoginLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysLoginLogDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysLoginLogDo) Delete(models ...*entity.SysLoginLog) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysLoginLogDo) withDO(do gen.Dao) *sysLoginLogDo {
	s.DO = *do.(*gen.DO)
	return s
}

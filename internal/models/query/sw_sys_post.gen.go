// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"sweet/internal/models/entity"
)

func newSysPost(db *gorm.DB, opts ...gen.DOOption) sysPost {
	_sysPost := sysPost{}

	_sysPost.sysPostDo.UseDB(db, opts...)
	_sysPost.sysPostDo.UseModel(&entity.SysPost{})

	tableName := _sysPost.sysPostDo.TableName()
	_sysPost.ALL = field.NewAsterisk(tableName)
	_sysPost.ID = field.NewInt64(tableName, "id")
	_sysPost.DeptID = field.NewInt64(tableName, "dept_id")
	_sysPost.Name = field.NewString(tableName, "name")
	_sysPost.Code = field.NewString(tableName, "code")
	_sysPost.Sort = field.NewInt64(tableName, "sort")
	_sysPost.Status = field.NewInt64(tableName, "status")
	_sysPost.CreatedAt = field.NewTime(tableName, "created_at")
	_sysPost.UpdatedAt = field.NewTime(tableName, "updated_at")
	_sysPost.DeletedAt = field.NewField(tableName, "deleted_at")
	_sysPost.Dept = sysPostBelongsToDept{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Dept", "entity.SysDept"),
	}

	_sysPost.fillFieldMap()

	return _sysPost
}

// sysPost 岗位表
type sysPost struct {
	sysPostDo

	ALL       field.Asterisk
	ID        field.Int64  // 岗位ID
	DeptID    field.Int64  // 所属部门
	Name      field.String // 岗位名称
	Code      field.String // 岗位编码
	Sort      field.Int64  // 排序
	Status    field.Int64  // 状态: 1-启用, 2-禁用
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间
	DeletedAt field.Field  // 删除时间
	Dept      sysPostBelongsToDept

	fieldMap map[string]field.Expr
}

func (s sysPost) Table(newTableName string) *sysPost {
	s.sysPostDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysPost) As(alias string) *sysPost {
	s.sysPostDo.DO = *(s.sysPostDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysPost) updateTableName(table string) *sysPost {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.DeptID = field.NewInt64(table, "dept_id")
	s.Name = field.NewString(table, "name")
	s.Code = field.NewString(table, "code")
	s.Sort = field.NewInt64(table, "sort")
	s.Status = field.NewInt64(table, "status")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *sysPost) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysPost) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["id"] = s.ID
	s.fieldMap["dept_id"] = s.DeptID
	s.fieldMap["name"] = s.Name
	s.fieldMap["code"] = s.Code
	s.fieldMap["sort"] = s.Sort
	s.fieldMap["status"] = s.Status
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt

}

func (s sysPost) clone(db *gorm.DB) sysPost {
	s.sysPostDo.ReplaceConnPool(db.Statement.ConnPool)
	s.Dept.db = db.Session(&gorm.Session{Initialized: true})
	s.Dept.db.Statement.ConnPool = db.Statement.ConnPool
	return s
}

func (s sysPost) replaceDB(db *gorm.DB) sysPost {
	s.sysPostDo.ReplaceDB(db)
	s.Dept.db = db.Session(&gorm.Session{})
	return s
}

type sysPostBelongsToDept struct {
	db *gorm.DB

	field.RelationField
}

func (a sysPostBelongsToDept) Where(conds ...field.Expr) *sysPostBelongsToDept {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a sysPostBelongsToDept) WithContext(ctx context.Context) *sysPostBelongsToDept {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a sysPostBelongsToDept) Session(session *gorm.Session) *sysPostBelongsToDept {
	a.db = a.db.Session(session)
	return &a
}

func (a sysPostBelongsToDept) Model(m *entity.SysPost) *sysPostBelongsToDeptTx {
	return &sysPostBelongsToDeptTx{a.db.Model(m).Association(a.Name())}
}

func (a sysPostBelongsToDept) Unscoped() *sysPostBelongsToDept {
	a.db = a.db.Unscoped()
	return &a
}

type sysPostBelongsToDeptTx struct{ tx *gorm.Association }

func (a sysPostBelongsToDeptTx) Find() (result *entity.SysDept, err error) {
	return result, a.tx.Find(&result)
}

func (a sysPostBelongsToDeptTx) Append(values ...*entity.SysDept) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a sysPostBelongsToDeptTx) Replace(values ...*entity.SysDept) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a sysPostBelongsToDeptTx) Delete(values ...*entity.SysDept) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a sysPostBelongsToDeptTx) Clear() error {
	return a.tx.Clear()
}

func (a sysPostBelongsToDeptTx) Count() int64 {
	return a.tx.Count()
}

func (a sysPostBelongsToDeptTx) Unscoped() *sysPostBelongsToDeptTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type sysPostDo struct{ gen.DO }

type ISysPostDo interface {
	gen.SubQuery
	Debug() ISysPostDo
	WithContext(ctx context.Context) ISysPostDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysPostDo
	WriteDB() ISysPostDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysPostDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysPostDo
	Not(conds ...gen.Condition) ISysPostDo
	Or(conds ...gen.Condition) ISysPostDo
	Select(conds ...field.Expr) ISysPostDo
	Where(conds ...gen.Condition) ISysPostDo
	Order(conds ...field.Expr) ISysPostDo
	Distinct(cols ...field.Expr) ISysPostDo
	Omit(cols ...field.Expr) ISysPostDo
	Join(table schema.Tabler, on ...field.Expr) ISysPostDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysPostDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysPostDo
	Group(cols ...field.Expr) ISysPostDo
	Having(conds ...gen.Condition) ISysPostDo
	Limit(limit int) ISysPostDo
	Offset(offset int) ISysPostDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysPostDo
	Unscoped() ISysPostDo
	Create(values ...*entity.SysPost) error
	CreateInBatches(values []*entity.SysPost, batchSize int) error
	Save(values ...*entity.SysPost) error
	First() (*entity.SysPost, error)
	Take() (*entity.SysPost, error)
	Last() (*entity.SysPost, error)
	Find() ([]*entity.SysPost, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SysPost, err error)
	FindInBatches(result *[]*entity.SysPost, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.SysPost) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysPostDo
	Assign(attrs ...field.AssignExpr) ISysPostDo
	Joins(fields ...field.RelationField) ISysPostDo
	Preload(fields ...field.RelationField) ISysPostDo
	FirstOrInit() (*entity.SysPost, error)
	FirstOrCreate() (*entity.SysPost, error)
	FindByPage(offset int, limit int) (result []*entity.SysPost, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysPostDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysPostDo) Debug() ISysPostDo {
	return s.withDO(s.DO.Debug())
}

func (s sysPostDo) WithContext(ctx context.Context) ISysPostDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysPostDo) ReadDB() ISysPostDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysPostDo) WriteDB() ISysPostDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysPostDo) Session(config *gorm.Session) ISysPostDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysPostDo) Clauses(conds ...clause.Expression) ISysPostDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysPostDo) Returning(value interface{}, columns ...string) ISysPostDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysPostDo) Not(conds ...gen.Condition) ISysPostDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysPostDo) Or(conds ...gen.Condition) ISysPostDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysPostDo) Select(conds ...field.Expr) ISysPostDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysPostDo) Where(conds ...gen.Condition) ISysPostDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysPostDo) Order(conds ...field.Expr) ISysPostDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysPostDo) Distinct(cols ...field.Expr) ISysPostDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysPostDo) Omit(cols ...field.Expr) ISysPostDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysPostDo) Join(table schema.Tabler, on ...field.Expr) ISysPostDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysPostDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysPostDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysPostDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysPostDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysPostDo) Group(cols ...field.Expr) ISysPostDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysPostDo) Having(conds ...gen.Condition) ISysPostDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysPostDo) Limit(limit int) ISysPostDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysPostDo) Offset(offset int) ISysPostDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysPostDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysPostDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysPostDo) Unscoped() ISysPostDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysPostDo) Create(values ...*entity.SysPost) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysPostDo) CreateInBatches(values []*entity.SysPost, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysPostDo) Save(values ...*entity.SysPost) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysPostDo) First() (*entity.SysPost, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysPost), nil
	}
}

func (s sysPostDo) Take() (*entity.SysPost, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysPost), nil
	}
}

func (s sysPostDo) Last() (*entity.SysPost, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysPost), nil
	}
}

func (s sysPostDo) Find() ([]*entity.SysPost, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SysPost), err
}

func (s sysPostDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SysPost, err error) {
	buf := make([]*entity.SysPost, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysPostDo) FindInBatches(result *[]*entity.SysPost, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysPostDo) Attrs(attrs ...field.AssignExpr) ISysPostDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysPostDo) Assign(attrs ...field.AssignExpr) ISysPostDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysPostDo) Joins(fields ...field.RelationField) ISysPostDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysPostDo) Preload(fields ...field.RelationField) ISysPostDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysPostDo) FirstOrInit() (*entity.SysPost, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysPost), nil
	}
}

func (s sysPostDo) FirstOrCreate() (*entity.SysPost, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysPost), nil
	}
}

func (s sysPostDo) FindByPage(offset int, limit int) (result []*entity.SysPost, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysPostDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysPostDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysPostDo) Delete(models ...*entity.SysPost) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysPostDo) withDO(do gen.Dao) *sysPostDo {
	s.DO = *do.(*gen.DO)
	return s
}

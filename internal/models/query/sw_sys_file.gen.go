// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"sweet/internal/models/entity"
)

func newSysFile(db *gorm.DB, opts ...gen.DOOption) sysFile {
	_sysFile := sysFile{}

	_sysFile.sysFileDo.UseDB(db, opts...)
	_sysFile.sysFileDo.UseModel(&entity.SysFile{})

	tableName := _sysFile.sysFileDo.TableName()
	_sysFile.ALL = field.NewAsterisk(tableName)
	_sysFile.ID = field.NewInt64(tableName, "id")
	_sysFile.Name = field.NewString(tableName, "name")
	_sysFile.OriginalName = field.NewString(tableName, "original_name")
	_sysFile.FilePath = field.NewString(tableName, "file_path")
	_sysFile.FileURL = field.NewString(tableName, "file_url")
	_sysFile.FileSize = field.NewInt64(tableName, "file_size")
	_sysFile.FileType = field.NewString(tableName, "file_type")
	_sysFile.FileExt = field.NewString(tableName, "file_ext")
	_sysFile.Md5 = field.NewString(tableName, "md5")
	_sysFile.StorageType = field.NewInt64(tableName, "storage_type")
	_sysFile.UploadUserID = field.NewInt64(tableName, "upload_user_id")
	_sysFile.Status = field.NewInt64(tableName, "status")
	_sysFile.CreatedAt = field.NewTime(tableName, "created_at")
	_sysFile.UpdatedAt = field.NewTime(tableName, "updated_at")
	_sysFile.DeletedAt = field.NewField(tableName, "deleted_at")
	_sysFile.UploadUser = sysFileBelongsToUploadUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("UploadUser", "entity.SysUser"),
	}

	_sysFile.fillFieldMap()

	return _sysFile
}

// sysFile 系统文件表
type sysFile struct {
	sysFileDo

	ALL          field.Asterisk
	ID           field.Int64  // 文件ID
	Name         field.String // 文件名称
	OriginalName field.String // 原始文件名
	FilePath     field.String // 文件路径
	FileURL      field.String // 文件访问URL
	FileSize     field.Int64  // 文件大小（字节）
	FileType     field.String // 文件类型/MIME类型
	FileExt      field.String // 文件扩展名
	Md5          field.String // 文件MD5值
	StorageType  field.Int64  // 存储类型：1=本地存储，2=阿里云OSS，3=腾讯云COS，4=七牛云
	UploadUserID field.Int64  // 上传用户ID
	Status       field.Int64  // 状态：1=正常，2=禁用
	CreatedAt    field.Time   // 创建时间
	UpdatedAt    field.Time   // 更新时间
	DeletedAt    field.Field  // 删除时间
	UploadUser   sysFileBelongsToUploadUser

	fieldMap map[string]field.Expr
}

func (s sysFile) Table(newTableName string) *sysFile {
	s.sysFileDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysFile) As(alias string) *sysFile {
	s.sysFileDo.DO = *(s.sysFileDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysFile) updateTableName(table string) *sysFile {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Name = field.NewString(table, "name")
	s.OriginalName = field.NewString(table, "original_name")
	s.FilePath = field.NewString(table, "file_path")
	s.FileURL = field.NewString(table, "file_url")
	s.FileSize = field.NewInt64(table, "file_size")
	s.FileType = field.NewString(table, "file_type")
	s.FileExt = field.NewString(table, "file_ext")
	s.Md5 = field.NewString(table, "md5")
	s.StorageType = field.NewInt64(table, "storage_type")
	s.UploadUserID = field.NewInt64(table, "upload_user_id")
	s.Status = field.NewInt64(table, "status")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *sysFile) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysFile) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 16)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["original_name"] = s.OriginalName
	s.fieldMap["file_path"] = s.FilePath
	s.fieldMap["file_url"] = s.FileURL
	s.fieldMap["file_size"] = s.FileSize
	s.fieldMap["file_type"] = s.FileType
	s.fieldMap["file_ext"] = s.FileExt
	s.fieldMap["md5"] = s.Md5
	s.fieldMap["storage_type"] = s.StorageType
	s.fieldMap["upload_user_id"] = s.UploadUserID
	s.fieldMap["status"] = s.Status
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt

}

func (s sysFile) clone(db *gorm.DB) sysFile {
	s.sysFileDo.ReplaceConnPool(db.Statement.ConnPool)
	s.UploadUser.db = db.Session(&gorm.Session{Initialized: true})
	s.UploadUser.db.Statement.ConnPool = db.Statement.ConnPool
	return s
}

func (s sysFile) replaceDB(db *gorm.DB) sysFile {
	s.sysFileDo.ReplaceDB(db)
	s.UploadUser.db = db.Session(&gorm.Session{})
	return s
}

type sysFileBelongsToUploadUser struct {
	db *gorm.DB

	field.RelationField
}

func (a sysFileBelongsToUploadUser) Where(conds ...field.Expr) *sysFileBelongsToUploadUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a sysFileBelongsToUploadUser) WithContext(ctx context.Context) *sysFileBelongsToUploadUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a sysFileBelongsToUploadUser) Session(session *gorm.Session) *sysFileBelongsToUploadUser {
	a.db = a.db.Session(session)
	return &a
}

func (a sysFileBelongsToUploadUser) Model(m *entity.SysFile) *sysFileBelongsToUploadUserTx {
	return &sysFileBelongsToUploadUserTx{a.db.Model(m).Association(a.Name())}
}

func (a sysFileBelongsToUploadUser) Unscoped() *sysFileBelongsToUploadUser {
	a.db = a.db.Unscoped()
	return &a
}

type sysFileBelongsToUploadUserTx struct{ tx *gorm.Association }

func (a sysFileBelongsToUploadUserTx) Find() (result *entity.SysUser, err error) {
	return result, a.tx.Find(&result)
}

func (a sysFileBelongsToUploadUserTx) Append(values ...*entity.SysUser) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a sysFileBelongsToUploadUserTx) Replace(values ...*entity.SysUser) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a sysFileBelongsToUploadUserTx) Delete(values ...*entity.SysUser) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a sysFileBelongsToUploadUserTx) Clear() error {
	return a.tx.Clear()
}

func (a sysFileBelongsToUploadUserTx) Count() int64 {
	return a.tx.Count()
}

func (a sysFileBelongsToUploadUserTx) Unscoped() *sysFileBelongsToUploadUserTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type sysFileDo struct{ gen.DO }

type ISysFileDo interface {
	gen.SubQuery
	Debug() ISysFileDo
	WithContext(ctx context.Context) ISysFileDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysFileDo
	WriteDB() ISysFileDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysFileDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysFileDo
	Not(conds ...gen.Condition) ISysFileDo
	Or(conds ...gen.Condition) ISysFileDo
	Select(conds ...field.Expr) ISysFileDo
	Where(conds ...gen.Condition) ISysFileDo
	Order(conds ...field.Expr) ISysFileDo
	Distinct(cols ...field.Expr) ISysFileDo
	Omit(cols ...field.Expr) ISysFileDo
	Join(table schema.Tabler, on ...field.Expr) ISysFileDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysFileDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysFileDo
	Group(cols ...field.Expr) ISysFileDo
	Having(conds ...gen.Condition) ISysFileDo
	Limit(limit int) ISysFileDo
	Offset(offset int) ISysFileDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysFileDo
	Unscoped() ISysFileDo
	Create(values ...*entity.SysFile) error
	CreateInBatches(values []*entity.SysFile, batchSize int) error
	Save(values ...*entity.SysFile) error
	First() (*entity.SysFile, error)
	Take() (*entity.SysFile, error)
	Last() (*entity.SysFile, error)
	Find() ([]*entity.SysFile, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SysFile, err error)
	FindInBatches(result *[]*entity.SysFile, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.SysFile) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysFileDo
	Assign(attrs ...field.AssignExpr) ISysFileDo
	Joins(fields ...field.RelationField) ISysFileDo
	Preload(fields ...field.RelationField) ISysFileDo
	FirstOrInit() (*entity.SysFile, error)
	FirstOrCreate() (*entity.SysFile, error)
	FindByPage(offset int, limit int) (result []*entity.SysFile, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysFileDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysFileDo) Debug() ISysFileDo {
	return s.withDO(s.DO.Debug())
}

func (s sysFileDo) WithContext(ctx context.Context) ISysFileDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysFileDo) ReadDB() ISysFileDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysFileDo) WriteDB() ISysFileDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysFileDo) Session(config *gorm.Session) ISysFileDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysFileDo) Clauses(conds ...clause.Expression) ISysFileDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysFileDo) Returning(value interface{}, columns ...string) ISysFileDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysFileDo) Not(conds ...gen.Condition) ISysFileDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysFileDo) Or(conds ...gen.Condition) ISysFileDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysFileDo) Select(conds ...field.Expr) ISysFileDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysFileDo) Where(conds ...gen.Condition) ISysFileDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysFileDo) Order(conds ...field.Expr) ISysFileDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysFileDo) Distinct(cols ...field.Expr) ISysFileDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysFileDo) Omit(cols ...field.Expr) ISysFileDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysFileDo) Join(table schema.Tabler, on ...field.Expr) ISysFileDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysFileDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysFileDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysFileDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysFileDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysFileDo) Group(cols ...field.Expr) ISysFileDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysFileDo) Having(conds ...gen.Condition) ISysFileDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysFileDo) Limit(limit int) ISysFileDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysFileDo) Offset(offset int) ISysFileDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysFileDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysFileDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysFileDo) Unscoped() ISysFileDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysFileDo) Create(values ...*entity.SysFile) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysFileDo) CreateInBatches(values []*entity.SysFile, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysFileDo) Save(values ...*entity.SysFile) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysFileDo) First() (*entity.SysFile, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysFile), nil
	}
}

func (s sysFileDo) Take() (*entity.SysFile, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysFile), nil
	}
}

func (s sysFileDo) Last() (*entity.SysFile, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysFile), nil
	}
}

func (s sysFileDo) Find() ([]*entity.SysFile, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SysFile), err
}

func (s sysFileDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SysFile, err error) {
	buf := make([]*entity.SysFile, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysFileDo) FindInBatches(result *[]*entity.SysFile, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysFileDo) Attrs(attrs ...field.AssignExpr) ISysFileDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysFileDo) Assign(attrs ...field.AssignExpr) ISysFileDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysFileDo) Joins(fields ...field.RelationField) ISysFileDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysFileDo) Preload(fields ...field.RelationField) ISysFileDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysFileDo) FirstOrInit() (*entity.SysFile, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysFile), nil
	}
}

func (s sysFileDo) FirstOrCreate() (*entity.SysFile, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysFile), nil
	}
}

func (s sysFileDo) FindByPage(offset int, limit int) (result []*entity.SysFile, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysFileDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysFileDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysFileDo) Delete(models ...*entity.SysFile) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysFileDo) withDO(do gen.Dao) *sysFileDo {
	s.DO = *do.(*gen.DO)
	return s
}

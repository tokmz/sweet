// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"sweet/internal/models/entity"
)

func newSysApi(db *gorm.DB, opts ...gen.DOOption) sysApi {
	_sysApi := sysApi{}

	_sysApi.sysApiDo.UseDB(db, opts...)
	_sysApi.sysApiDo.UseModel(&entity.SysApi{})

	tableName := _sysApi.sysApiDo.TableName()
	_sysApi.ALL = field.NewAsterisk(tableName)
	_sysApi.ID = field.NewInt64(tableName, "id")
	_sysApi.Name = field.NewString(tableName, "name")
	_sysApi.Path = field.NewString(tableName, "path")
	_sysApi.Method = field.NewString(tableName, "method")
	_sysApi.Group_ = field.NewString(tableName, "group")
	_sysApi.Description = field.NewString(tableName, "description")
	_sysApi.Status = field.NewInt64(tableName, "status")
	_sysApi.IsAuth = field.NewInt64(tableName, "is_auth")
	_sysApi.CreateBy = field.NewInt64(tableName, "create_by")
	_sysApi.UpdateBy = field.NewInt64(tableName, "update_by")
	_sysApi.CreatedAt = field.NewTime(tableName, "created_at")
	_sysApi.UpdatedAt = field.NewTime(tableName, "updated_at")
	_sysApi.DeletedAt = field.NewField(tableName, "deleted_at")
	_sysApi.ApiGroup = sysApiBelongsToApiGroup{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("ApiGroup", "entity.SysApiGroup"),
	}

	_sysApi.fillFieldMap()

	return _sysApi
}

// sysApi API接口表
type sysApi struct {
	sysApiDo

	ALL         field.Asterisk
	ID          field.Int64  // API ID
	Name        field.String // API名称
	Path        field.String // API路径
	Method      field.String // HTTP方法
	Group_      field.String // API分组
	Description field.String // API描述
	Status      field.Int64  // API状态（1正常 2停用）
	IsAuth      field.Int64  // 是否需要认证（1需要 2不需要）
	CreateBy    field.Int64  // 创建者
	UpdateBy    field.Int64  // 更新者
	CreatedAt   field.Time   // 创建时间
	UpdatedAt   field.Time   // 更新时间
	DeletedAt   field.Field  // 删除时间
	ApiGroup    sysApiBelongsToApiGroup

	fieldMap map[string]field.Expr
}

func (s sysApi) Table(newTableName string) *sysApi {
	s.sysApiDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysApi) As(alias string) *sysApi {
	s.sysApiDo.DO = *(s.sysApiDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysApi) updateTableName(table string) *sysApi {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Name = field.NewString(table, "name")
	s.Path = field.NewString(table, "path")
	s.Method = field.NewString(table, "method")
	s.Group_ = field.NewString(table, "group")
	s.Description = field.NewString(table, "description")
	s.Status = field.NewInt64(table, "status")
	s.IsAuth = field.NewInt64(table, "is_auth")
	s.CreateBy = field.NewInt64(table, "create_by")
	s.UpdateBy = field.NewInt64(table, "update_by")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *sysApi) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysApi) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 14)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["path"] = s.Path
	s.fieldMap["method"] = s.Method
	s.fieldMap["group"] = s.Group_
	s.fieldMap["description"] = s.Description
	s.fieldMap["status"] = s.Status
	s.fieldMap["is_auth"] = s.IsAuth
	s.fieldMap["create_by"] = s.CreateBy
	s.fieldMap["update_by"] = s.UpdateBy
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt

}

func (s sysApi) clone(db *gorm.DB) sysApi {
	s.sysApiDo.ReplaceConnPool(db.Statement.ConnPool)
	s.ApiGroup.db = db.Session(&gorm.Session{Initialized: true})
	s.ApiGroup.db.Statement.ConnPool = db.Statement.ConnPool
	return s
}

func (s sysApi) replaceDB(db *gorm.DB) sysApi {
	s.sysApiDo.ReplaceDB(db)
	s.ApiGroup.db = db.Session(&gorm.Session{})
	return s
}

type sysApiBelongsToApiGroup struct {
	db *gorm.DB

	field.RelationField
}

func (a sysApiBelongsToApiGroup) Where(conds ...field.Expr) *sysApiBelongsToApiGroup {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a sysApiBelongsToApiGroup) WithContext(ctx context.Context) *sysApiBelongsToApiGroup {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a sysApiBelongsToApiGroup) Session(session *gorm.Session) *sysApiBelongsToApiGroup {
	a.db = a.db.Session(session)
	return &a
}

func (a sysApiBelongsToApiGroup) Model(m *entity.SysApi) *sysApiBelongsToApiGroupTx {
	return &sysApiBelongsToApiGroupTx{a.db.Model(m).Association(a.Name())}
}

func (a sysApiBelongsToApiGroup) Unscoped() *sysApiBelongsToApiGroup {
	a.db = a.db.Unscoped()
	return &a
}

type sysApiBelongsToApiGroupTx struct{ tx *gorm.Association }

func (a sysApiBelongsToApiGroupTx) Find() (result *entity.SysApiGroup, err error) {
	return result, a.tx.Find(&result)
}

func (a sysApiBelongsToApiGroupTx) Append(values ...*entity.SysApiGroup) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a sysApiBelongsToApiGroupTx) Replace(values ...*entity.SysApiGroup) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a sysApiBelongsToApiGroupTx) Delete(values ...*entity.SysApiGroup) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a sysApiBelongsToApiGroupTx) Clear() error {
	return a.tx.Clear()
}

func (a sysApiBelongsToApiGroupTx) Count() int64 {
	return a.tx.Count()
}

func (a sysApiBelongsToApiGroupTx) Unscoped() *sysApiBelongsToApiGroupTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type sysApiDo struct{ gen.DO }

type ISysApiDo interface {
	gen.SubQuery
	Debug() ISysApiDo
	WithContext(ctx context.Context) ISysApiDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysApiDo
	WriteDB() ISysApiDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysApiDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysApiDo
	Not(conds ...gen.Condition) ISysApiDo
	Or(conds ...gen.Condition) ISysApiDo
	Select(conds ...field.Expr) ISysApiDo
	Where(conds ...gen.Condition) ISysApiDo
	Order(conds ...field.Expr) ISysApiDo
	Distinct(cols ...field.Expr) ISysApiDo
	Omit(cols ...field.Expr) ISysApiDo
	Join(table schema.Tabler, on ...field.Expr) ISysApiDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysApiDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysApiDo
	Group(cols ...field.Expr) ISysApiDo
	Having(conds ...gen.Condition) ISysApiDo
	Limit(limit int) ISysApiDo
	Offset(offset int) ISysApiDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysApiDo
	Unscoped() ISysApiDo
	Create(values ...*entity.SysApi) error
	CreateInBatches(values []*entity.SysApi, batchSize int) error
	Save(values ...*entity.SysApi) error
	First() (*entity.SysApi, error)
	Take() (*entity.SysApi, error)
	Last() (*entity.SysApi, error)
	Find() ([]*entity.SysApi, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SysApi, err error)
	FindInBatches(result *[]*entity.SysApi, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.SysApi) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysApiDo
	Assign(attrs ...field.AssignExpr) ISysApiDo
	Joins(fields ...field.RelationField) ISysApiDo
	Preload(fields ...field.RelationField) ISysApiDo
	FirstOrInit() (*entity.SysApi, error)
	FirstOrCreate() (*entity.SysApi, error)
	FindByPage(offset int, limit int) (result []*entity.SysApi, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysApiDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysApiDo) Debug() ISysApiDo {
	return s.withDO(s.DO.Debug())
}

func (s sysApiDo) WithContext(ctx context.Context) ISysApiDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysApiDo) ReadDB() ISysApiDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysApiDo) WriteDB() ISysApiDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysApiDo) Session(config *gorm.Session) ISysApiDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysApiDo) Clauses(conds ...clause.Expression) ISysApiDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysApiDo) Returning(value interface{}, columns ...string) ISysApiDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysApiDo) Not(conds ...gen.Condition) ISysApiDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysApiDo) Or(conds ...gen.Condition) ISysApiDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysApiDo) Select(conds ...field.Expr) ISysApiDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysApiDo) Where(conds ...gen.Condition) ISysApiDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysApiDo) Order(conds ...field.Expr) ISysApiDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysApiDo) Distinct(cols ...field.Expr) ISysApiDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysApiDo) Omit(cols ...field.Expr) ISysApiDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysApiDo) Join(table schema.Tabler, on ...field.Expr) ISysApiDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysApiDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysApiDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysApiDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysApiDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysApiDo) Group(cols ...field.Expr) ISysApiDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysApiDo) Having(conds ...gen.Condition) ISysApiDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysApiDo) Limit(limit int) ISysApiDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysApiDo) Offset(offset int) ISysApiDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysApiDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysApiDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysApiDo) Unscoped() ISysApiDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysApiDo) Create(values ...*entity.SysApi) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysApiDo) CreateInBatches(values []*entity.SysApi, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysApiDo) Save(values ...*entity.SysApi) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysApiDo) First() (*entity.SysApi, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysApi), nil
	}
}

func (s sysApiDo) Take() (*entity.SysApi, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysApi), nil
	}
}

func (s sysApiDo) Last() (*entity.SysApi, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysApi), nil
	}
}

func (s sysApiDo) Find() ([]*entity.SysApi, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SysApi), err
}

func (s sysApiDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SysApi, err error) {
	buf := make([]*entity.SysApi, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysApiDo) FindInBatches(result *[]*entity.SysApi, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysApiDo) Attrs(attrs ...field.AssignExpr) ISysApiDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysApiDo) Assign(attrs ...field.AssignExpr) ISysApiDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysApiDo) Joins(fields ...field.RelationField) ISysApiDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysApiDo) Preload(fields ...field.RelationField) ISysApiDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysApiDo) FirstOrInit() (*entity.SysApi, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysApi), nil
	}
}

func (s sysApiDo) FirstOrCreate() (*entity.SysApi, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysApi), nil
	}
}

func (s sysApiDo) FindByPage(offset int, limit int) (result []*entity.SysApi, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysApiDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysApiDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysApiDo) Delete(models ...*entity.SysApi) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysApiDo) withDO(do gen.Dao) *sysApiDo {
	s.DO = *do.(*gen.DO)
	return s
}

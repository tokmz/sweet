// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"sweet/internal/models/entity"
)

func newSysMenuConfig(db *gorm.DB, opts ...gen.DOOption) sysMenuConfig {
	_sysMenuConfig := sysMenuConfig{}

	_sysMenuConfig.sysMenuConfigDo.UseDB(db, opts...)
	_sysMenuConfig.sysMenuConfigDo.UseModel(&entity.SysMenuConfig{})

	tableName := _sysMenuConfig.sysMenuConfigDo.TableName()
	_sysMenuConfig.ALL = field.NewAsterisk(tableName)
	_sysMenuConfig.ID = field.NewInt64(tableName, "id")
	_sysMenuConfig.MenuID = field.NewInt64(tableName, "menu_id")
	_sysMenuConfig.Query = field.NewString(tableName, "query")
	_sysMenuConfig.IsFrame = field.NewInt64(tableName, "is_frame")
	_sysMenuConfig.ShowBadge = field.NewInt64(tableName, "show_badge")
	_sysMenuConfig.ShowTextBadge = field.NewString(tableName, "show_text_badge")
	_sysMenuConfig.IsHide = field.NewInt64(tableName, "is_hide")
	_sysMenuConfig.IsHideTab = field.NewInt64(tableName, "is_hide_tab")
	_sysMenuConfig.Link = field.NewString(tableName, "link")
	_sysMenuConfig.IsIframe = field.NewInt64(tableName, "is_iframe")
	_sysMenuConfig.KeepAlive = field.NewInt64(tableName, "keep_alive")
	_sysMenuConfig.FixedTab = field.NewInt64(tableName, "fixed_tab")
	_sysMenuConfig.IsFirstLevel = field.NewInt64(tableName, "is_first_level")
	_sysMenuConfig.ActivePath = field.NewString(tableName, "active_path")
	_sysMenuConfig.CreatedAt = field.NewTime(tableName, "created_at")
	_sysMenuConfig.UpdatedAt = field.NewTime(tableName, "updated_at")

	_sysMenuConfig.fillFieldMap()

	return _sysMenuConfig
}

// sysMenuConfig 菜单配置表
type sysMenuConfig struct {
	sysMenuConfigDo

	ALL           field.Asterisk
	ID            field.Int64  // ID
	MenuID        field.Int64  // 菜单ID
	Query         field.String // 路由参数
	IsFrame       field.Int64  // 是否外联（1 是 2 否）
	ShowBadge     field.Int64  // 是否显示徽章（1 是 2 否）
	ShowTextBadge field.String // 文本徽章内容
	IsHide        field.Int64  // 是否在菜单中隐藏（1 是 2 否）
	IsHideTab     field.Int64  // 是否在标签页中隐藏（1 是 2 否）
	Link          field.String // 外链地址
	IsIframe      field.Int64  // 是否iframe（1 是 2 否）
	KeepAlive     field.Int64  // 是否缓存页面（1 是 2否）
	FixedTab      field.Int64  // 是否固定标签页（1 是 2 否）
	IsFirstLevel  field.Int64  // 是否为一级菜单
	ActivePath    field.String // 激活菜单路径
	CreatedAt     field.Time   // 创建时间
	UpdatedAt     field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (s sysMenuConfig) Table(newTableName string) *sysMenuConfig {
	s.sysMenuConfigDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysMenuConfig) As(alias string) *sysMenuConfig {
	s.sysMenuConfigDo.DO = *(s.sysMenuConfigDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysMenuConfig) updateTableName(table string) *sysMenuConfig {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.MenuID = field.NewInt64(table, "menu_id")
	s.Query = field.NewString(table, "query")
	s.IsFrame = field.NewInt64(table, "is_frame")
	s.ShowBadge = field.NewInt64(table, "show_badge")
	s.ShowTextBadge = field.NewString(table, "show_text_badge")
	s.IsHide = field.NewInt64(table, "is_hide")
	s.IsHideTab = field.NewInt64(table, "is_hide_tab")
	s.Link = field.NewString(table, "link")
	s.IsIframe = field.NewInt64(table, "is_iframe")
	s.KeepAlive = field.NewInt64(table, "keep_alive")
	s.FixedTab = field.NewInt64(table, "fixed_tab")
	s.IsFirstLevel = field.NewInt64(table, "is_first_level")
	s.ActivePath = field.NewString(table, "active_path")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *sysMenuConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysMenuConfig) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 16)
	s.fieldMap["id"] = s.ID
	s.fieldMap["menu_id"] = s.MenuID
	s.fieldMap["query"] = s.Query
	s.fieldMap["is_frame"] = s.IsFrame
	s.fieldMap["show_badge"] = s.ShowBadge
	s.fieldMap["show_text_badge"] = s.ShowTextBadge
	s.fieldMap["is_hide"] = s.IsHide
	s.fieldMap["is_hide_tab"] = s.IsHideTab
	s.fieldMap["link"] = s.Link
	s.fieldMap["is_iframe"] = s.IsIframe
	s.fieldMap["keep_alive"] = s.KeepAlive
	s.fieldMap["fixed_tab"] = s.FixedTab
	s.fieldMap["is_first_level"] = s.IsFirstLevel
	s.fieldMap["active_path"] = s.ActivePath
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s sysMenuConfig) clone(db *gorm.DB) sysMenuConfig {
	s.sysMenuConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysMenuConfig) replaceDB(db *gorm.DB) sysMenuConfig {
	s.sysMenuConfigDo.ReplaceDB(db)
	return s
}

type sysMenuConfigDo struct{ gen.DO }

type ISysMenuConfigDo interface {
	gen.SubQuery
	Debug() ISysMenuConfigDo
	WithContext(ctx context.Context) ISysMenuConfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysMenuConfigDo
	WriteDB() ISysMenuConfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysMenuConfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysMenuConfigDo
	Not(conds ...gen.Condition) ISysMenuConfigDo
	Or(conds ...gen.Condition) ISysMenuConfigDo
	Select(conds ...field.Expr) ISysMenuConfigDo
	Where(conds ...gen.Condition) ISysMenuConfigDo
	Order(conds ...field.Expr) ISysMenuConfigDo
	Distinct(cols ...field.Expr) ISysMenuConfigDo
	Omit(cols ...field.Expr) ISysMenuConfigDo
	Join(table schema.Tabler, on ...field.Expr) ISysMenuConfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysMenuConfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysMenuConfigDo
	Group(cols ...field.Expr) ISysMenuConfigDo
	Having(conds ...gen.Condition) ISysMenuConfigDo
	Limit(limit int) ISysMenuConfigDo
	Offset(offset int) ISysMenuConfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysMenuConfigDo
	Unscoped() ISysMenuConfigDo
	Create(values ...*entity.SysMenuConfig) error
	CreateInBatches(values []*entity.SysMenuConfig, batchSize int) error
	Save(values ...*entity.SysMenuConfig) error
	First() (*entity.SysMenuConfig, error)
	Take() (*entity.SysMenuConfig, error)
	Last() (*entity.SysMenuConfig, error)
	Find() ([]*entity.SysMenuConfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SysMenuConfig, err error)
	FindInBatches(result *[]*entity.SysMenuConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.SysMenuConfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysMenuConfigDo
	Assign(attrs ...field.AssignExpr) ISysMenuConfigDo
	Joins(fields ...field.RelationField) ISysMenuConfigDo
	Preload(fields ...field.RelationField) ISysMenuConfigDo
	FirstOrInit() (*entity.SysMenuConfig, error)
	FirstOrCreate() (*entity.SysMenuConfig, error)
	FindByPage(offset int, limit int) (result []*entity.SysMenuConfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysMenuConfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysMenuConfigDo) Debug() ISysMenuConfigDo {
	return s.withDO(s.DO.Debug())
}

func (s sysMenuConfigDo) WithContext(ctx context.Context) ISysMenuConfigDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysMenuConfigDo) ReadDB() ISysMenuConfigDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysMenuConfigDo) WriteDB() ISysMenuConfigDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysMenuConfigDo) Session(config *gorm.Session) ISysMenuConfigDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysMenuConfigDo) Clauses(conds ...clause.Expression) ISysMenuConfigDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysMenuConfigDo) Returning(value interface{}, columns ...string) ISysMenuConfigDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysMenuConfigDo) Not(conds ...gen.Condition) ISysMenuConfigDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysMenuConfigDo) Or(conds ...gen.Condition) ISysMenuConfigDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysMenuConfigDo) Select(conds ...field.Expr) ISysMenuConfigDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysMenuConfigDo) Where(conds ...gen.Condition) ISysMenuConfigDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysMenuConfigDo) Order(conds ...field.Expr) ISysMenuConfigDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysMenuConfigDo) Distinct(cols ...field.Expr) ISysMenuConfigDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysMenuConfigDo) Omit(cols ...field.Expr) ISysMenuConfigDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysMenuConfigDo) Join(table schema.Tabler, on ...field.Expr) ISysMenuConfigDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysMenuConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysMenuConfigDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysMenuConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysMenuConfigDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysMenuConfigDo) Group(cols ...field.Expr) ISysMenuConfigDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysMenuConfigDo) Having(conds ...gen.Condition) ISysMenuConfigDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysMenuConfigDo) Limit(limit int) ISysMenuConfigDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysMenuConfigDo) Offset(offset int) ISysMenuConfigDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysMenuConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysMenuConfigDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysMenuConfigDo) Unscoped() ISysMenuConfigDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysMenuConfigDo) Create(values ...*entity.SysMenuConfig) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysMenuConfigDo) CreateInBatches(values []*entity.SysMenuConfig, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysMenuConfigDo) Save(values ...*entity.SysMenuConfig) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysMenuConfigDo) First() (*entity.SysMenuConfig, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysMenuConfig), nil
	}
}

func (s sysMenuConfigDo) Take() (*entity.SysMenuConfig, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysMenuConfig), nil
	}
}

func (s sysMenuConfigDo) Last() (*entity.SysMenuConfig, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysMenuConfig), nil
	}
}

func (s sysMenuConfigDo) Find() ([]*entity.SysMenuConfig, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SysMenuConfig), err
}

func (s sysMenuConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SysMenuConfig, err error) {
	buf := make([]*entity.SysMenuConfig, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysMenuConfigDo) FindInBatches(result *[]*entity.SysMenuConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysMenuConfigDo) Attrs(attrs ...field.AssignExpr) ISysMenuConfigDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysMenuConfigDo) Assign(attrs ...field.AssignExpr) ISysMenuConfigDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysMenuConfigDo) Joins(fields ...field.RelationField) ISysMenuConfigDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysMenuConfigDo) Preload(fields ...field.RelationField) ISysMenuConfigDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysMenuConfigDo) FirstOrInit() (*entity.SysMenuConfig, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysMenuConfig), nil
	}
}

func (s sysMenuConfigDo) FirstOrCreate() (*entity.SysMenuConfig, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysMenuConfig), nil
	}
}

func (s sysMenuConfigDo) FindByPage(offset int, limit int) (result []*entity.SysMenuConfig, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysMenuConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysMenuConfigDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysMenuConfigDo) Delete(models ...*entity.SysMenuConfig) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysMenuConfigDo) withDO(do gen.Dao) *sysMenuConfigDo {
	s.DO = *do.(*gen.DO)
	return s
}

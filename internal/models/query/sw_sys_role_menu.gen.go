// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"sweet/internal/models/entity"
)

func newSysRoleMenu(db *gorm.DB, opts ...gen.DOOption) sysRoleMenu {
	_sysRoleMenu := sysRoleMenu{}

	_sysRoleMenu.sysRoleMenuDo.UseDB(db, opts...)
	_sysRoleMenu.sysRoleMenuDo.UseModel(&entity.SysRoleMenu{})

	tableName := _sysRoleMenu.sysRoleMenuDo.TableName()
	_sysRoleMenu.ALL = field.NewAsterisk(tableName)
	_sysRoleMenu.RoleID = field.NewInt64(tableName, "role_id")
	_sysRoleMenu.MenuID = field.NewInt64(tableName, "menu_id")
	_sysRoleMenu.Role = sysRoleMenuBelongsToRole{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Role", "entity.SysRole"),
	}

	_sysRoleMenu.Menu = sysRoleMenuBelongsToMenu{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Menu", "entity.SysMenu"),
	}

	_sysRoleMenu.fillFieldMap()

	return _sysRoleMenu
}

// sysRoleMenu 角色菜单关联表
type sysRoleMenu struct {
	sysRoleMenuDo

	ALL    field.Asterisk
	RoleID field.Int64 // 角色ID
	MenuID field.Int64 // 菜单ID
	Role   sysRoleMenuBelongsToRole

	Menu sysRoleMenuBelongsToMenu

	fieldMap map[string]field.Expr
}

func (s sysRoleMenu) Table(newTableName string) *sysRoleMenu {
	s.sysRoleMenuDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysRoleMenu) As(alias string) *sysRoleMenu {
	s.sysRoleMenuDo.DO = *(s.sysRoleMenuDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysRoleMenu) updateTableName(table string) *sysRoleMenu {
	s.ALL = field.NewAsterisk(table)
	s.RoleID = field.NewInt64(table, "role_id")
	s.MenuID = field.NewInt64(table, "menu_id")

	s.fillFieldMap()

	return s
}

func (s *sysRoleMenu) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysRoleMenu) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 4)
	s.fieldMap["role_id"] = s.RoleID
	s.fieldMap["menu_id"] = s.MenuID

}

func (s sysRoleMenu) clone(db *gorm.DB) sysRoleMenu {
	s.sysRoleMenuDo.ReplaceConnPool(db.Statement.ConnPool)
	s.Role.db = db.Session(&gorm.Session{Initialized: true})
	s.Role.db.Statement.ConnPool = db.Statement.ConnPool
	s.Menu.db = db.Session(&gorm.Session{Initialized: true})
	s.Menu.db.Statement.ConnPool = db.Statement.ConnPool
	return s
}

func (s sysRoleMenu) replaceDB(db *gorm.DB) sysRoleMenu {
	s.sysRoleMenuDo.ReplaceDB(db)
	s.Role.db = db.Session(&gorm.Session{})
	s.Menu.db = db.Session(&gorm.Session{})
	return s
}

type sysRoleMenuBelongsToRole struct {
	db *gorm.DB

	field.RelationField
}

func (a sysRoleMenuBelongsToRole) Where(conds ...field.Expr) *sysRoleMenuBelongsToRole {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a sysRoleMenuBelongsToRole) WithContext(ctx context.Context) *sysRoleMenuBelongsToRole {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a sysRoleMenuBelongsToRole) Session(session *gorm.Session) *sysRoleMenuBelongsToRole {
	a.db = a.db.Session(session)
	return &a
}

func (a sysRoleMenuBelongsToRole) Model(m *entity.SysRoleMenu) *sysRoleMenuBelongsToRoleTx {
	return &sysRoleMenuBelongsToRoleTx{a.db.Model(m).Association(a.Name())}
}

func (a sysRoleMenuBelongsToRole) Unscoped() *sysRoleMenuBelongsToRole {
	a.db = a.db.Unscoped()
	return &a
}

type sysRoleMenuBelongsToRoleTx struct{ tx *gorm.Association }

func (a sysRoleMenuBelongsToRoleTx) Find() (result *entity.SysRole, err error) {
	return result, a.tx.Find(&result)
}

func (a sysRoleMenuBelongsToRoleTx) Append(values ...*entity.SysRole) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a sysRoleMenuBelongsToRoleTx) Replace(values ...*entity.SysRole) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a sysRoleMenuBelongsToRoleTx) Delete(values ...*entity.SysRole) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a sysRoleMenuBelongsToRoleTx) Clear() error {
	return a.tx.Clear()
}

func (a sysRoleMenuBelongsToRoleTx) Count() int64 {
	return a.tx.Count()
}

func (a sysRoleMenuBelongsToRoleTx) Unscoped() *sysRoleMenuBelongsToRoleTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type sysRoleMenuBelongsToMenu struct {
	db *gorm.DB

	field.RelationField
}

func (a sysRoleMenuBelongsToMenu) Where(conds ...field.Expr) *sysRoleMenuBelongsToMenu {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a sysRoleMenuBelongsToMenu) WithContext(ctx context.Context) *sysRoleMenuBelongsToMenu {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a sysRoleMenuBelongsToMenu) Session(session *gorm.Session) *sysRoleMenuBelongsToMenu {
	a.db = a.db.Session(session)
	return &a
}

func (a sysRoleMenuBelongsToMenu) Model(m *entity.SysRoleMenu) *sysRoleMenuBelongsToMenuTx {
	return &sysRoleMenuBelongsToMenuTx{a.db.Model(m).Association(a.Name())}
}

func (a sysRoleMenuBelongsToMenu) Unscoped() *sysRoleMenuBelongsToMenu {
	a.db = a.db.Unscoped()
	return &a
}

type sysRoleMenuBelongsToMenuTx struct{ tx *gorm.Association }

func (a sysRoleMenuBelongsToMenuTx) Find() (result *entity.SysMenu, err error) {
	return result, a.tx.Find(&result)
}

func (a sysRoleMenuBelongsToMenuTx) Append(values ...*entity.SysMenu) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a sysRoleMenuBelongsToMenuTx) Replace(values ...*entity.SysMenu) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a sysRoleMenuBelongsToMenuTx) Delete(values ...*entity.SysMenu) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a sysRoleMenuBelongsToMenuTx) Clear() error {
	return a.tx.Clear()
}

func (a sysRoleMenuBelongsToMenuTx) Count() int64 {
	return a.tx.Count()
}

func (a sysRoleMenuBelongsToMenuTx) Unscoped() *sysRoleMenuBelongsToMenuTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type sysRoleMenuDo struct{ gen.DO }

type ISysRoleMenuDo interface {
	gen.SubQuery
	Debug() ISysRoleMenuDo
	WithContext(ctx context.Context) ISysRoleMenuDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysRoleMenuDo
	WriteDB() ISysRoleMenuDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysRoleMenuDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysRoleMenuDo
	Not(conds ...gen.Condition) ISysRoleMenuDo
	Or(conds ...gen.Condition) ISysRoleMenuDo
	Select(conds ...field.Expr) ISysRoleMenuDo
	Where(conds ...gen.Condition) ISysRoleMenuDo
	Order(conds ...field.Expr) ISysRoleMenuDo
	Distinct(cols ...field.Expr) ISysRoleMenuDo
	Omit(cols ...field.Expr) ISysRoleMenuDo
	Join(table schema.Tabler, on ...field.Expr) ISysRoleMenuDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysRoleMenuDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysRoleMenuDo
	Group(cols ...field.Expr) ISysRoleMenuDo
	Having(conds ...gen.Condition) ISysRoleMenuDo
	Limit(limit int) ISysRoleMenuDo
	Offset(offset int) ISysRoleMenuDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysRoleMenuDo
	Unscoped() ISysRoleMenuDo
	Create(values ...*entity.SysRoleMenu) error
	CreateInBatches(values []*entity.SysRoleMenu, batchSize int) error
	Save(values ...*entity.SysRoleMenu) error
	First() (*entity.SysRoleMenu, error)
	Take() (*entity.SysRoleMenu, error)
	Last() (*entity.SysRoleMenu, error)
	Find() ([]*entity.SysRoleMenu, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SysRoleMenu, err error)
	FindInBatches(result *[]*entity.SysRoleMenu, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.SysRoleMenu) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysRoleMenuDo
	Assign(attrs ...field.AssignExpr) ISysRoleMenuDo
	Joins(fields ...field.RelationField) ISysRoleMenuDo
	Preload(fields ...field.RelationField) ISysRoleMenuDo
	FirstOrInit() (*entity.SysRoleMenu, error)
	FirstOrCreate() (*entity.SysRoleMenu, error)
	FindByPage(offset int, limit int) (result []*entity.SysRoleMenu, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysRoleMenuDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysRoleMenuDo) Debug() ISysRoleMenuDo {
	return s.withDO(s.DO.Debug())
}

func (s sysRoleMenuDo) WithContext(ctx context.Context) ISysRoleMenuDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysRoleMenuDo) ReadDB() ISysRoleMenuDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysRoleMenuDo) WriteDB() ISysRoleMenuDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysRoleMenuDo) Session(config *gorm.Session) ISysRoleMenuDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysRoleMenuDo) Clauses(conds ...clause.Expression) ISysRoleMenuDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysRoleMenuDo) Returning(value interface{}, columns ...string) ISysRoleMenuDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysRoleMenuDo) Not(conds ...gen.Condition) ISysRoleMenuDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysRoleMenuDo) Or(conds ...gen.Condition) ISysRoleMenuDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysRoleMenuDo) Select(conds ...field.Expr) ISysRoleMenuDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysRoleMenuDo) Where(conds ...gen.Condition) ISysRoleMenuDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysRoleMenuDo) Order(conds ...field.Expr) ISysRoleMenuDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysRoleMenuDo) Distinct(cols ...field.Expr) ISysRoleMenuDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysRoleMenuDo) Omit(cols ...field.Expr) ISysRoleMenuDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysRoleMenuDo) Join(table schema.Tabler, on ...field.Expr) ISysRoleMenuDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysRoleMenuDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysRoleMenuDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysRoleMenuDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysRoleMenuDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysRoleMenuDo) Group(cols ...field.Expr) ISysRoleMenuDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysRoleMenuDo) Having(conds ...gen.Condition) ISysRoleMenuDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysRoleMenuDo) Limit(limit int) ISysRoleMenuDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysRoleMenuDo) Offset(offset int) ISysRoleMenuDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysRoleMenuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysRoleMenuDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysRoleMenuDo) Unscoped() ISysRoleMenuDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysRoleMenuDo) Create(values ...*entity.SysRoleMenu) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysRoleMenuDo) CreateInBatches(values []*entity.SysRoleMenu, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysRoleMenuDo) Save(values ...*entity.SysRoleMenu) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysRoleMenuDo) First() (*entity.SysRoleMenu, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysRoleMenu), nil
	}
}

func (s sysRoleMenuDo) Take() (*entity.SysRoleMenu, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysRoleMenu), nil
	}
}

func (s sysRoleMenuDo) Last() (*entity.SysRoleMenu, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysRoleMenu), nil
	}
}

func (s sysRoleMenuDo) Find() ([]*entity.SysRoleMenu, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SysRoleMenu), err
}

func (s sysRoleMenuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SysRoleMenu, err error) {
	buf := make([]*entity.SysRoleMenu, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysRoleMenuDo) FindInBatches(result *[]*entity.SysRoleMenu, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysRoleMenuDo) Attrs(attrs ...field.AssignExpr) ISysRoleMenuDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysRoleMenuDo) Assign(attrs ...field.AssignExpr) ISysRoleMenuDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysRoleMenuDo) Joins(fields ...field.RelationField) ISysRoleMenuDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysRoleMenuDo) Preload(fields ...field.RelationField) ISysRoleMenuDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysRoleMenuDo) FirstOrInit() (*entity.SysRoleMenu, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysRoleMenu), nil
	}
}

func (s sysRoleMenuDo) FirstOrCreate() (*entity.SysRoleMenu, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysRoleMenu), nil
	}
}

func (s sysRoleMenuDo) FindByPage(offset int, limit int) (result []*entity.SysRoleMenu, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysRoleMenuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysRoleMenuDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysRoleMenuDo) Delete(models ...*entity.SysRoleMenu) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysRoleMenuDo) withDO(do gen.Dao) *sysRoleMenuDo {
	s.DO = *do.(*gen.DO)
	return s
}

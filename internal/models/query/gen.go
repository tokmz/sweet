// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q               = new(Query)
	SysApi          *sysApi
	SysApiGroup     *sysApiGroup
	SysDept         *sysDept
	SysFile         *sysFile
	SysLoginLog     *sysLoginLog
	SysMenu         *sysMenu
	SysMenuConfig   *sysMenuConfig
	SysOperationLog *sysOperationLog
	SysPost         *sysPost
	SysRole         *sysRole
	SysRoleApi      *sysRoleApi
	SysRoleMenu     *sysRoleMenu
	SysUser         *sysUser
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	SysApi = &Q.SysApi
	SysApiGroup = &Q.SysApiGroup
	SysDept = &Q.SysDept
	SysFile = &Q.SysFile
	SysLoginLog = &Q.SysLoginLog
	SysMenu = &Q.SysMenu
	SysMenuConfig = &Q.SysMenuConfig
	SysOperationLog = &Q.SysOperationLog
	SysPost = &Q.SysPost
	SysRole = &Q.SysRole
	SysRoleApi = &Q.SysRoleApi
	SysRoleMenu = &Q.SysRoleMenu
	SysUser = &Q.SysUser
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:              db,
		SysApi:          newSysApi(db, opts...),
		SysApiGroup:     newSysApiGroup(db, opts...),
		SysDept:         newSysDept(db, opts...),
		SysFile:         newSysFile(db, opts...),
		SysLoginLog:     newSysLoginLog(db, opts...),
		SysMenu:         newSysMenu(db, opts...),
		SysMenuConfig:   newSysMenuConfig(db, opts...),
		SysOperationLog: newSysOperationLog(db, opts...),
		SysPost:         newSysPost(db, opts...),
		SysRole:         newSysRole(db, opts...),
		SysRoleApi:      newSysRoleApi(db, opts...),
		SysRoleMenu:     newSysRoleMenu(db, opts...),
		SysUser:         newSysUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	SysApi          sysApi
	SysApiGroup     sysApiGroup
	SysDept         sysDept
	SysFile         sysFile
	SysLoginLog     sysLoginLog
	SysMenu         sysMenu
	SysMenuConfig   sysMenuConfig
	SysOperationLog sysOperationLog
	SysPost         sysPost
	SysRole         sysRole
	SysRoleApi      sysRoleApi
	SysRoleMenu     sysRoleMenu
	SysUser         sysUser
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:              db,
		SysApi:          q.SysApi.clone(db),
		SysApiGroup:     q.SysApiGroup.clone(db),
		SysDept:         q.SysDept.clone(db),
		SysFile:         q.SysFile.clone(db),
		SysLoginLog:     q.SysLoginLog.clone(db),
		SysMenu:         q.SysMenu.clone(db),
		SysMenuConfig:   q.SysMenuConfig.clone(db),
		SysOperationLog: q.SysOperationLog.clone(db),
		SysPost:         q.SysPost.clone(db),
		SysRole:         q.SysRole.clone(db),
		SysRoleApi:      q.SysRoleApi.clone(db),
		SysRoleMenu:     q.SysRoleMenu.clone(db),
		SysUser:         q.SysUser.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:              db,
		SysApi:          q.SysApi.replaceDB(db),
		SysApiGroup:     q.SysApiGroup.replaceDB(db),
		SysDept:         q.SysDept.replaceDB(db),
		SysFile:         q.SysFile.replaceDB(db),
		SysLoginLog:     q.SysLoginLog.replaceDB(db),
		SysMenu:         q.SysMenu.replaceDB(db),
		SysMenuConfig:   q.SysMenuConfig.replaceDB(db),
		SysOperationLog: q.SysOperationLog.replaceDB(db),
		SysPost:         q.SysPost.replaceDB(db),
		SysRole:         q.SysRole.replaceDB(db),
		SysRoleApi:      q.SysRoleApi.replaceDB(db),
		SysRoleMenu:     q.SysRoleMenu.replaceDB(db),
		SysUser:         q.SysUser.replaceDB(db),
	}
}

type queryCtx struct {
	SysApi          ISysApiDo
	SysApiGroup     ISysApiGroupDo
	SysDept         ISysDeptDo
	SysFile         ISysFileDo
	SysLoginLog     ISysLoginLogDo
	SysMenu         ISysMenuDo
	SysMenuConfig   ISysMenuConfigDo
	SysOperationLog ISysOperationLogDo
	SysPost         ISysPostDo
	SysRole         ISysRoleDo
	SysRoleApi      ISysRoleApiDo
	SysRoleMenu     ISysRoleMenuDo
	SysUser         ISysUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		SysApi:          q.SysApi.WithContext(ctx),
		SysApiGroup:     q.SysApiGroup.WithContext(ctx),
		SysDept:         q.SysDept.WithContext(ctx),
		SysFile:         q.SysFile.WithContext(ctx),
		SysLoginLog:     q.SysLoginLog.WithContext(ctx),
		SysMenu:         q.SysMenu.WithContext(ctx),
		SysMenuConfig:   q.SysMenuConfig.WithContext(ctx),
		SysOperationLog: q.SysOperationLog.WithContext(ctx),
		SysPost:         q.SysPost.WithContext(ctx),
		SysRole:         q.SysRole.WithContext(ctx),
		SysRoleApi:      q.SysRoleApi.WithContext(ctx),
		SysRoleMenu:     q.SysRoleMenu.WithContext(ctx),
		SysUser:         q.SysUser.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}

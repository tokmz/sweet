// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"sweet/internal/models/entity"
)

func newSysMenu(db *gorm.DB, opts ...gen.DOOption) sysMenu {
	_sysMenu := sysMenu{}

	_sysMenu.sysMenuDo.UseDB(db, opts...)
	_sysMenu.sysMenuDo.UseModel(&entity.SysMenu{})

	tableName := _sysMenu.sysMenuDo.TableName()
	_sysMenu.ALL = field.NewAsterisk(tableName)
	_sysMenu.ID = field.NewInt64(tableName, "id")
	_sysMenu.Name = field.NewString(tableName, "name")
	_sysMenu.Title = field.NewString(tableName, "title")
	_sysMenu.ParentID = field.NewInt64(tableName, "parent_id")
	_sysMenu.Path = field.NewString(tableName, "path")
	_sysMenu.Component = field.NewString(tableName, "component")
	_sysMenu.MenuType = field.NewInt64(tableName, "menu_type")
	_sysMenu.Status = field.NewInt64(tableName, "status")
	_sysMenu.Perms = field.NewString(tableName, "perms")
	_sysMenu.Icon = field.NewString(tableName, "icon")
	_sysMenu.Order_ = field.NewInt64(tableName, "order")
	_sysMenu.Remark = field.NewString(tableName, "remark")
	_sysMenu.CreateBy = field.NewInt64(tableName, "create_by")
	_sysMenu.UpdateBy = field.NewInt64(tableName, "update_by")
	_sysMenu.CreatedAt = field.NewTime(tableName, "created_at")
	_sysMenu.UpdatedAt = field.NewTime(tableName, "updated_at")
	_sysMenu.DeletedAt = field.NewField(tableName, "deleted_at")
	_sysMenu.Parent = sysMenuBelongsToParent{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Parent", "entity.SysMenu"),
	}

	_sysMenu.Children = sysMenuHasManyChildren{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Children", "entity.SysMenu"),
	}

	_sysMenu.fillFieldMap()

	return _sysMenu
}

// sysMenu 菜单表
type sysMenu struct {
	sysMenuDo

	ALL       field.Asterisk
	ID        field.Int64  // 菜单ID
	Name      field.String // 组件名称/路由名称
	Title     field.String // 菜单名称
	ParentID  field.Int64  // 父菜单ID
	Path      field.String // 路由地址
	Component field.String // 组件地址
	MenuType  field.Int64  // 菜单类型（1 目录 2 菜单 3 按钮）
	Status    field.Int64  // 菜单状态(1 正常 2 停用)
	Perms     field.String // 权限标识
	Icon      field.String // 菜单图标
	Order_    field.Int64  // 显示顺序 从大到小
	Remark    field.String // 备注
	CreateBy  field.Int64  // 创建者
	UpdateBy  field.Int64  // 更新者
	CreatedAt field.Time   // 创建时间
	UpdatedAt field.Time   // 更新时间
	DeletedAt field.Field  // 删除时间
	Parent    sysMenuBelongsToParent

	Children sysMenuHasManyChildren

	fieldMap map[string]field.Expr
}

func (s sysMenu) Table(newTableName string) *sysMenu {
	s.sysMenuDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysMenu) As(alias string) *sysMenu {
	s.sysMenuDo.DO = *(s.sysMenuDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysMenu) updateTableName(table string) *sysMenu {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Name = field.NewString(table, "name")
	s.Title = field.NewString(table, "title")
	s.ParentID = field.NewInt64(table, "parent_id")
	s.Path = field.NewString(table, "path")
	s.Component = field.NewString(table, "component")
	s.MenuType = field.NewInt64(table, "menu_type")
	s.Status = field.NewInt64(table, "status")
	s.Perms = field.NewString(table, "perms")
	s.Icon = field.NewString(table, "icon")
	s.Order_ = field.NewInt64(table, "order")
	s.Remark = field.NewString(table, "remark")
	s.CreateBy = field.NewInt64(table, "create_by")
	s.UpdateBy = field.NewInt64(table, "update_by")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *sysMenu) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysMenu) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 19)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["title"] = s.Title
	s.fieldMap["parent_id"] = s.ParentID
	s.fieldMap["path"] = s.Path
	s.fieldMap["component"] = s.Component
	s.fieldMap["menu_type"] = s.MenuType
	s.fieldMap["status"] = s.Status
	s.fieldMap["perms"] = s.Perms
	s.fieldMap["icon"] = s.Icon
	s.fieldMap["order"] = s.Order_
	s.fieldMap["remark"] = s.Remark
	s.fieldMap["create_by"] = s.CreateBy
	s.fieldMap["update_by"] = s.UpdateBy
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt

}

func (s sysMenu) clone(db *gorm.DB) sysMenu {
	s.sysMenuDo.ReplaceConnPool(db.Statement.ConnPool)
	s.Parent.db = db.Session(&gorm.Session{Initialized: true})
	s.Parent.db.Statement.ConnPool = db.Statement.ConnPool
	s.Children.db = db.Session(&gorm.Session{Initialized: true})
	s.Children.db.Statement.ConnPool = db.Statement.ConnPool
	return s
}

func (s sysMenu) replaceDB(db *gorm.DB) sysMenu {
	s.sysMenuDo.ReplaceDB(db)
	s.Parent.db = db.Session(&gorm.Session{})
	s.Children.db = db.Session(&gorm.Session{})
	return s
}

type sysMenuBelongsToParent struct {
	db *gorm.DB

	field.RelationField
}

func (a sysMenuBelongsToParent) Where(conds ...field.Expr) *sysMenuBelongsToParent {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a sysMenuBelongsToParent) WithContext(ctx context.Context) *sysMenuBelongsToParent {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a sysMenuBelongsToParent) Session(session *gorm.Session) *sysMenuBelongsToParent {
	a.db = a.db.Session(session)
	return &a
}

func (a sysMenuBelongsToParent) Model(m *entity.SysMenu) *sysMenuBelongsToParentTx {
	return &sysMenuBelongsToParentTx{a.db.Model(m).Association(a.Name())}
}

func (a sysMenuBelongsToParent) Unscoped() *sysMenuBelongsToParent {
	a.db = a.db.Unscoped()
	return &a
}

type sysMenuBelongsToParentTx struct{ tx *gorm.Association }

func (a sysMenuBelongsToParentTx) Find() (result *entity.SysMenu, err error) {
	return result, a.tx.Find(&result)
}

func (a sysMenuBelongsToParentTx) Append(values ...*entity.SysMenu) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a sysMenuBelongsToParentTx) Replace(values ...*entity.SysMenu) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a sysMenuBelongsToParentTx) Delete(values ...*entity.SysMenu) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a sysMenuBelongsToParentTx) Clear() error {
	return a.tx.Clear()
}

func (a sysMenuBelongsToParentTx) Count() int64 {
	return a.tx.Count()
}

func (a sysMenuBelongsToParentTx) Unscoped() *sysMenuBelongsToParentTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type sysMenuHasManyChildren struct {
	db *gorm.DB

	field.RelationField
}

func (a sysMenuHasManyChildren) Where(conds ...field.Expr) *sysMenuHasManyChildren {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a sysMenuHasManyChildren) WithContext(ctx context.Context) *sysMenuHasManyChildren {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a sysMenuHasManyChildren) Session(session *gorm.Session) *sysMenuHasManyChildren {
	a.db = a.db.Session(session)
	return &a
}

func (a sysMenuHasManyChildren) Model(m *entity.SysMenu) *sysMenuHasManyChildrenTx {
	return &sysMenuHasManyChildrenTx{a.db.Model(m).Association(a.Name())}
}

func (a sysMenuHasManyChildren) Unscoped() *sysMenuHasManyChildren {
	a.db = a.db.Unscoped()
	return &a
}

type sysMenuHasManyChildrenTx struct{ tx *gorm.Association }

func (a sysMenuHasManyChildrenTx) Find() (result []*entity.SysMenu, err error) {
	return result, a.tx.Find(&result)
}

func (a sysMenuHasManyChildrenTx) Append(values ...*entity.SysMenu) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a sysMenuHasManyChildrenTx) Replace(values ...*entity.SysMenu) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a sysMenuHasManyChildrenTx) Delete(values ...*entity.SysMenu) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a sysMenuHasManyChildrenTx) Clear() error {
	return a.tx.Clear()
}

func (a sysMenuHasManyChildrenTx) Count() int64 {
	return a.tx.Count()
}

func (a sysMenuHasManyChildrenTx) Unscoped() *sysMenuHasManyChildrenTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type sysMenuDo struct{ gen.DO }

type ISysMenuDo interface {
	gen.SubQuery
	Debug() ISysMenuDo
	WithContext(ctx context.Context) ISysMenuDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysMenuDo
	WriteDB() ISysMenuDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysMenuDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysMenuDo
	Not(conds ...gen.Condition) ISysMenuDo
	Or(conds ...gen.Condition) ISysMenuDo
	Select(conds ...field.Expr) ISysMenuDo
	Where(conds ...gen.Condition) ISysMenuDo
	Order(conds ...field.Expr) ISysMenuDo
	Distinct(cols ...field.Expr) ISysMenuDo
	Omit(cols ...field.Expr) ISysMenuDo
	Join(table schema.Tabler, on ...field.Expr) ISysMenuDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysMenuDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysMenuDo
	Group(cols ...field.Expr) ISysMenuDo
	Having(conds ...gen.Condition) ISysMenuDo
	Limit(limit int) ISysMenuDo
	Offset(offset int) ISysMenuDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysMenuDo
	Unscoped() ISysMenuDo
	Create(values ...*entity.SysMenu) error
	CreateInBatches(values []*entity.SysMenu, batchSize int) error
	Save(values ...*entity.SysMenu) error
	First() (*entity.SysMenu, error)
	Take() (*entity.SysMenu, error)
	Last() (*entity.SysMenu, error)
	Find() ([]*entity.SysMenu, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SysMenu, err error)
	FindInBatches(result *[]*entity.SysMenu, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.SysMenu) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysMenuDo
	Assign(attrs ...field.AssignExpr) ISysMenuDo
	Joins(fields ...field.RelationField) ISysMenuDo
	Preload(fields ...field.RelationField) ISysMenuDo
	FirstOrInit() (*entity.SysMenu, error)
	FirstOrCreate() (*entity.SysMenu, error)
	FindByPage(offset int, limit int) (result []*entity.SysMenu, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysMenuDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysMenuDo) Debug() ISysMenuDo {
	return s.withDO(s.DO.Debug())
}

func (s sysMenuDo) WithContext(ctx context.Context) ISysMenuDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysMenuDo) ReadDB() ISysMenuDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysMenuDo) WriteDB() ISysMenuDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysMenuDo) Session(config *gorm.Session) ISysMenuDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysMenuDo) Clauses(conds ...clause.Expression) ISysMenuDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysMenuDo) Returning(value interface{}, columns ...string) ISysMenuDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysMenuDo) Not(conds ...gen.Condition) ISysMenuDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysMenuDo) Or(conds ...gen.Condition) ISysMenuDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysMenuDo) Select(conds ...field.Expr) ISysMenuDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysMenuDo) Where(conds ...gen.Condition) ISysMenuDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysMenuDo) Order(conds ...field.Expr) ISysMenuDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysMenuDo) Distinct(cols ...field.Expr) ISysMenuDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysMenuDo) Omit(cols ...field.Expr) ISysMenuDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysMenuDo) Join(table schema.Tabler, on ...field.Expr) ISysMenuDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysMenuDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysMenuDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysMenuDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysMenuDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysMenuDo) Group(cols ...field.Expr) ISysMenuDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysMenuDo) Having(conds ...gen.Condition) ISysMenuDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysMenuDo) Limit(limit int) ISysMenuDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysMenuDo) Offset(offset int) ISysMenuDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysMenuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysMenuDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysMenuDo) Unscoped() ISysMenuDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysMenuDo) Create(values ...*entity.SysMenu) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysMenuDo) CreateInBatches(values []*entity.SysMenu, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysMenuDo) Save(values ...*entity.SysMenu) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysMenuDo) First() (*entity.SysMenu, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysMenu), nil
	}
}

func (s sysMenuDo) Take() (*entity.SysMenu, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysMenu), nil
	}
}

func (s sysMenuDo) Last() (*entity.SysMenu, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysMenu), nil
	}
}

func (s sysMenuDo) Find() ([]*entity.SysMenu, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SysMenu), err
}

func (s sysMenuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SysMenu, err error) {
	buf := make([]*entity.SysMenu, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysMenuDo) FindInBatches(result *[]*entity.SysMenu, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysMenuDo) Attrs(attrs ...field.AssignExpr) ISysMenuDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysMenuDo) Assign(attrs ...field.AssignExpr) ISysMenuDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysMenuDo) Joins(fields ...field.RelationField) ISysMenuDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysMenuDo) Preload(fields ...field.RelationField) ISysMenuDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysMenuDo) FirstOrInit() (*entity.SysMenu, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysMenu), nil
	}
}

func (s sysMenuDo) FirstOrCreate() (*entity.SysMenu, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysMenu), nil
	}
}

func (s sysMenuDo) FindByPage(offset int, limit int) (result []*entity.SysMenu, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysMenuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysMenuDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysMenuDo) Delete(models ...*entity.SysMenu) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysMenuDo) withDO(do gen.Dao) *sysMenuDo {
	s.DO = *do.(*gen.DO)
	return s
}

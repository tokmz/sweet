// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"sweet/internal/models/entity"
)

func newSysRoleApi(db *gorm.DB, opts ...gen.DOOption) sysRoleApi {
	_sysRoleApi := sysRoleApi{}

	_sysRoleApi.sysRoleApiDo.UseDB(db, opts...)
	_sysRoleApi.sysRoleApiDo.UseModel(&entity.SysRoleApi{})

	tableName := _sysRoleApi.sysRoleApiDo.TableName()
	_sysRoleApi.ALL = field.NewAsterisk(tableName)
	_sysRoleApi.RoleID = field.NewInt64(tableName, "role_id")
	_sysRoleApi.APIID = field.NewInt64(tableName, "api_id")
	_sysRoleApi.Role = sysRoleApiBelongsToRole{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Role", "entity.SysRole"),
	}

	_sysRoleApi.Api = sysRoleApiBelongsToApi{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Api", "entity.SysApi"),
	}

	_sysRoleApi.fillFieldMap()

	return _sysRoleApi
}

// sysRoleApi 角色API关联表
type sysRoleApi struct {
	sysRoleApiDo

	ALL    field.Asterisk
	RoleID field.Int64 // 角色ID
	APIID  field.Int64 // API ID
	Role   sysRoleApiBelongsToRole

	Api sysRoleApiBelongsToApi

	fieldMap map[string]field.Expr
}

func (s sysRoleApi) Table(newTableName string) *sysRoleApi {
	s.sysRoleApiDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysRoleApi) As(alias string) *sysRoleApi {
	s.sysRoleApiDo.DO = *(s.sysRoleApiDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysRoleApi) updateTableName(table string) *sysRoleApi {
	s.ALL = field.NewAsterisk(table)
	s.RoleID = field.NewInt64(table, "role_id")
	s.APIID = field.NewInt64(table, "api_id")

	s.fillFieldMap()

	return s
}

func (s *sysRoleApi) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysRoleApi) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 4)
	s.fieldMap["role_id"] = s.RoleID
	s.fieldMap["api_id"] = s.APIID

}

func (s sysRoleApi) clone(db *gorm.DB) sysRoleApi {
	s.sysRoleApiDo.ReplaceConnPool(db.Statement.ConnPool)
	s.Role.db = db.Session(&gorm.Session{Initialized: true})
	s.Role.db.Statement.ConnPool = db.Statement.ConnPool
	s.Api.db = db.Session(&gorm.Session{Initialized: true})
	s.Api.db.Statement.ConnPool = db.Statement.ConnPool
	return s
}

func (s sysRoleApi) replaceDB(db *gorm.DB) sysRoleApi {
	s.sysRoleApiDo.ReplaceDB(db)
	s.Role.db = db.Session(&gorm.Session{})
	s.Api.db = db.Session(&gorm.Session{})
	return s
}

type sysRoleApiBelongsToRole struct {
	db *gorm.DB

	field.RelationField
}

func (a sysRoleApiBelongsToRole) Where(conds ...field.Expr) *sysRoleApiBelongsToRole {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a sysRoleApiBelongsToRole) WithContext(ctx context.Context) *sysRoleApiBelongsToRole {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a sysRoleApiBelongsToRole) Session(session *gorm.Session) *sysRoleApiBelongsToRole {
	a.db = a.db.Session(session)
	return &a
}

func (a sysRoleApiBelongsToRole) Model(m *entity.SysRoleApi) *sysRoleApiBelongsToRoleTx {
	return &sysRoleApiBelongsToRoleTx{a.db.Model(m).Association(a.Name())}
}

func (a sysRoleApiBelongsToRole) Unscoped() *sysRoleApiBelongsToRole {
	a.db = a.db.Unscoped()
	return &a
}

type sysRoleApiBelongsToRoleTx struct{ tx *gorm.Association }

func (a sysRoleApiBelongsToRoleTx) Find() (result *entity.SysRole, err error) {
	return result, a.tx.Find(&result)
}

func (a sysRoleApiBelongsToRoleTx) Append(values ...*entity.SysRole) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a sysRoleApiBelongsToRoleTx) Replace(values ...*entity.SysRole) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a sysRoleApiBelongsToRoleTx) Delete(values ...*entity.SysRole) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a sysRoleApiBelongsToRoleTx) Clear() error {
	return a.tx.Clear()
}

func (a sysRoleApiBelongsToRoleTx) Count() int64 {
	return a.tx.Count()
}

func (a sysRoleApiBelongsToRoleTx) Unscoped() *sysRoleApiBelongsToRoleTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type sysRoleApiBelongsToApi struct {
	db *gorm.DB

	field.RelationField
}

func (a sysRoleApiBelongsToApi) Where(conds ...field.Expr) *sysRoleApiBelongsToApi {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a sysRoleApiBelongsToApi) WithContext(ctx context.Context) *sysRoleApiBelongsToApi {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a sysRoleApiBelongsToApi) Session(session *gorm.Session) *sysRoleApiBelongsToApi {
	a.db = a.db.Session(session)
	return &a
}

func (a sysRoleApiBelongsToApi) Model(m *entity.SysRoleApi) *sysRoleApiBelongsToApiTx {
	return &sysRoleApiBelongsToApiTx{a.db.Model(m).Association(a.Name())}
}

func (a sysRoleApiBelongsToApi) Unscoped() *sysRoleApiBelongsToApi {
	a.db = a.db.Unscoped()
	return &a
}

type sysRoleApiBelongsToApiTx struct{ tx *gorm.Association }

func (a sysRoleApiBelongsToApiTx) Find() (result *entity.SysApi, err error) {
	return result, a.tx.Find(&result)
}

func (a sysRoleApiBelongsToApiTx) Append(values ...*entity.SysApi) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a sysRoleApiBelongsToApiTx) Replace(values ...*entity.SysApi) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a sysRoleApiBelongsToApiTx) Delete(values ...*entity.SysApi) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a sysRoleApiBelongsToApiTx) Clear() error {
	return a.tx.Clear()
}

func (a sysRoleApiBelongsToApiTx) Count() int64 {
	return a.tx.Count()
}

func (a sysRoleApiBelongsToApiTx) Unscoped() *sysRoleApiBelongsToApiTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type sysRoleApiDo struct{ gen.DO }

type ISysRoleApiDo interface {
	gen.SubQuery
	Debug() ISysRoleApiDo
	WithContext(ctx context.Context) ISysRoleApiDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysRoleApiDo
	WriteDB() ISysRoleApiDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysRoleApiDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysRoleApiDo
	Not(conds ...gen.Condition) ISysRoleApiDo
	Or(conds ...gen.Condition) ISysRoleApiDo
	Select(conds ...field.Expr) ISysRoleApiDo
	Where(conds ...gen.Condition) ISysRoleApiDo
	Order(conds ...field.Expr) ISysRoleApiDo
	Distinct(cols ...field.Expr) ISysRoleApiDo
	Omit(cols ...field.Expr) ISysRoleApiDo
	Join(table schema.Tabler, on ...field.Expr) ISysRoleApiDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysRoleApiDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysRoleApiDo
	Group(cols ...field.Expr) ISysRoleApiDo
	Having(conds ...gen.Condition) ISysRoleApiDo
	Limit(limit int) ISysRoleApiDo
	Offset(offset int) ISysRoleApiDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysRoleApiDo
	Unscoped() ISysRoleApiDo
	Create(values ...*entity.SysRoleApi) error
	CreateInBatches(values []*entity.SysRoleApi, batchSize int) error
	Save(values ...*entity.SysRoleApi) error
	First() (*entity.SysRoleApi, error)
	Take() (*entity.SysRoleApi, error)
	Last() (*entity.SysRoleApi, error)
	Find() ([]*entity.SysRoleApi, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SysRoleApi, err error)
	FindInBatches(result *[]*entity.SysRoleApi, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.SysRoleApi) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysRoleApiDo
	Assign(attrs ...field.AssignExpr) ISysRoleApiDo
	Joins(fields ...field.RelationField) ISysRoleApiDo
	Preload(fields ...field.RelationField) ISysRoleApiDo
	FirstOrInit() (*entity.SysRoleApi, error)
	FirstOrCreate() (*entity.SysRoleApi, error)
	FindByPage(offset int, limit int) (result []*entity.SysRoleApi, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysRoleApiDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysRoleApiDo) Debug() ISysRoleApiDo {
	return s.withDO(s.DO.Debug())
}

func (s sysRoleApiDo) WithContext(ctx context.Context) ISysRoleApiDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysRoleApiDo) ReadDB() ISysRoleApiDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysRoleApiDo) WriteDB() ISysRoleApiDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysRoleApiDo) Session(config *gorm.Session) ISysRoleApiDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysRoleApiDo) Clauses(conds ...clause.Expression) ISysRoleApiDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysRoleApiDo) Returning(value interface{}, columns ...string) ISysRoleApiDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysRoleApiDo) Not(conds ...gen.Condition) ISysRoleApiDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysRoleApiDo) Or(conds ...gen.Condition) ISysRoleApiDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysRoleApiDo) Select(conds ...field.Expr) ISysRoleApiDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysRoleApiDo) Where(conds ...gen.Condition) ISysRoleApiDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysRoleApiDo) Order(conds ...field.Expr) ISysRoleApiDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysRoleApiDo) Distinct(cols ...field.Expr) ISysRoleApiDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysRoleApiDo) Omit(cols ...field.Expr) ISysRoleApiDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysRoleApiDo) Join(table schema.Tabler, on ...field.Expr) ISysRoleApiDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysRoleApiDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysRoleApiDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysRoleApiDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysRoleApiDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysRoleApiDo) Group(cols ...field.Expr) ISysRoleApiDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysRoleApiDo) Having(conds ...gen.Condition) ISysRoleApiDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysRoleApiDo) Limit(limit int) ISysRoleApiDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysRoleApiDo) Offset(offset int) ISysRoleApiDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysRoleApiDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysRoleApiDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysRoleApiDo) Unscoped() ISysRoleApiDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysRoleApiDo) Create(values ...*entity.SysRoleApi) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysRoleApiDo) CreateInBatches(values []*entity.SysRoleApi, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysRoleApiDo) Save(values ...*entity.SysRoleApi) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysRoleApiDo) First() (*entity.SysRoleApi, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysRoleApi), nil
	}
}

func (s sysRoleApiDo) Take() (*entity.SysRoleApi, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysRoleApi), nil
	}
}

func (s sysRoleApiDo) Last() (*entity.SysRoleApi, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysRoleApi), nil
	}
}

func (s sysRoleApiDo) Find() ([]*entity.SysRoleApi, error) {
	result, err := s.DO.Find()
	return result.([]*entity.SysRoleApi), err
}

func (s sysRoleApiDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.SysRoleApi, err error) {
	buf := make([]*entity.SysRoleApi, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysRoleApiDo) FindInBatches(result *[]*entity.SysRoleApi, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysRoleApiDo) Attrs(attrs ...field.AssignExpr) ISysRoleApiDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysRoleApiDo) Assign(attrs ...field.AssignExpr) ISysRoleApiDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysRoleApiDo) Joins(fields ...field.RelationField) ISysRoleApiDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysRoleApiDo) Preload(fields ...field.RelationField) ISysRoleApiDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysRoleApiDo) FirstOrInit() (*entity.SysRoleApi, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysRoleApi), nil
	}
}

func (s sysRoleApiDo) FirstOrCreate() (*entity.SysRoleApi, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.SysRoleApi), nil
	}
}

func (s sysRoleApiDo) FindByPage(offset int, limit int) (result []*entity.SysRoleApi, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysRoleApiDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysRoleApiDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysRoleApiDo) Delete(models ...*entity.SysRoleApi) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysRoleApiDo) withDO(do gen.Dao) *sysRoleApiDo {
	s.DO = *do.(*gen.DO)
	return s
}
